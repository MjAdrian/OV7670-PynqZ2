// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ov7670_interface.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ov7670_interface::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ov7670_interface::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> ov7670_interface::ap_ST_fsm_state1 = "1";
const sc_lv<32> ov7670_interface::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> ov7670_interface::ap_const_lv1_1 = "1";
const sc_lv<1> ov7670_interface::ap_const_lv1_0 = "0";
const sc_lv<8> ov7670_interface::ap_const_lv8_0 = "00000000";
const sc_lv<32> ov7670_interface::ap_const_lv32_1E0 = "111100000";
const sc_lv<32> ov7670_interface::ap_const_lv32_500 = "10100000000";
const sc_lv<32> ov7670_interface::ap_const_lv32_1 = "1";
const bool ov7670_interface::ap_const_boolean_1 = true;

ov7670_interface::ov7670_interface(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln38_fu_177_p2);
    sensitive << ( count_readings );

    SC_METHOD(thread_add_ln44_fu_165_p2);
    sensitive << ( count_lines );

    SC_METHOD(thread_and_ln30_fu_125_p2);
    sensitive << ( icmp_ln30_fu_119_p2 );
    sensitive << ( xor_ln30_fu_109_p2 );

    SC_METHOD(thread_and_ln49_fu_137_p2);
    sensitive << ( xor_ln30_fu_109_p2 );
    sensitive << ( icmp_ln49_fu_131_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_51);
    sensitive << ( first_load_load_fu_99_p1 );
    sensitive << ( vsync_V_read_read_fu_54_p2 );
    sensitive << ( and_ln30_fu_125_p2 );
    sensitive << ( and_ln49_fu_137_p2 );

    SC_METHOD(thread_ap_condition_65);
    sensitive << ( first_load_load_fu_99_p1 );
    sensitive << ( vsync_V_read_read_fu_54_p2 );
    sensitive << ( and_ln30_fu_125_p2 );
    sensitive << ( href_V_read_read_fu_60_p2 );
    sensitive << ( icmp_ln40_fu_153_p2 );

    SC_METHOD(thread_ap_condition_74);
    sensitive << ( first_load_load_fu_99_p1 );
    sensitive << ( vsync_V_read_read_fu_54_p2 );
    sensitive << ( and_ln30_fu_125_p2 );
    sensitive << ( href_V_read_read_fu_60_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_data_out_V);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( data_in_V );
    sensitive << ( first_load_load_fu_99_p1 );
    sensitive << ( vsync_V_read_read_fu_54_p2 );
    sensitive << ( ap_condition_74 );

    SC_METHOD(thread_first_load_load_fu_99_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( first );
    sensitive << ( vsync_V_read_read_fu_54_p2 );

    SC_METHOD(thread_frame_valid_V);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( first_load_load_fu_99_p1 );
    sensitive << ( vsync_V_read_read_fu_54_p2 );
    sensitive << ( and_ln30_fu_125_p2 );

    SC_METHOD(thread_href_V_read_read_fu_60_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( href_V );

    SC_METHOD(thread_icmp_ln30_fu_119_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( count_lines );
    sensitive << ( first_load_load_fu_99_p1 );
    sensitive << ( vsync_V_read_read_fu_54_p2 );

    SC_METHOD(thread_icmp_ln40_fu_153_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( count_readings );
    sensitive << ( first_load_load_fu_99_p1 );
    sensitive << ( vsync_V_read_read_fu_54_p2 );
    sensitive << ( and_ln30_fu_125_p2 );
    sensitive << ( href_V_read_read_fu_60_p2 );

    SC_METHOD(thread_icmp_ln49_fu_131_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( count_lines );
    sensitive << ( first_load_load_fu_99_p1 );
    sensitive << ( vsync_V_read_read_fu_54_p2 );
    sensitive << ( and_ln30_fu_125_p2 );

    SC_METHOD(thread_line_valid_V);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( first_load_load_fu_99_p1 );
    sensitive << ( vsync_V_read_read_fu_54_p2 );
    sensitive << ( and_ln30_fu_125_p2 );
    sensitive << ( href_V_read_read_fu_60_p2 );

    SC_METHOD(thread_vsync_V_read_read_fu_54_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( vsync_V );

    SC_METHOD(thread_xor_ln30_fu_109_p2);
    sensitive << ( vsync_V );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "1";
    first = "1";
    count_lines = "00000000000000000000000000000000";
    count_readings = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ov7670_interface_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, data_in_V, "(port)data_in_V");
    sc_trace(mVcdFile, href_V, "(port)href_V");
    sc_trace(mVcdFile, vsync_V, "(port)vsync_V");
    sc_trace(mVcdFile, data_out_V, "(port)data_out_V");
    sc_trace(mVcdFile, line_valid_V, "(port)line_valid_V");
    sc_trace(mVcdFile, frame_valid_V, "(port)frame_valid_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, first, "first");
    sc_trace(mVcdFile, count_lines, "count_lines");
    sc_trace(mVcdFile, count_readings, "count_readings");
    sc_trace(mVcdFile, first_load_load_fu_99_p1, "first_load_load_fu_99_p1");
    sc_trace(mVcdFile, vsync_V_read_read_fu_54_p2, "vsync_V_read_read_fu_54_p2");
    sc_trace(mVcdFile, and_ln30_fu_125_p2, "and_ln30_fu_125_p2");
    sc_trace(mVcdFile, and_ln49_fu_137_p2, "and_ln49_fu_137_p2");
    sc_trace(mVcdFile, add_ln44_fu_165_p2, "add_ln44_fu_165_p2");
    sc_trace(mVcdFile, href_V_read_read_fu_60_p2, "href_V_read_read_fu_60_p2");
    sc_trace(mVcdFile, icmp_ln40_fu_153_p2, "icmp_ln40_fu_153_p2");
    sc_trace(mVcdFile, add_ln38_fu_177_p2, "add_ln38_fu_177_p2");
    sc_trace(mVcdFile, icmp_ln30_fu_119_p2, "icmp_ln30_fu_119_p2");
    sc_trace(mVcdFile, xor_ln30_fu_109_p2, "xor_ln30_fu_109_p2");
    sc_trace(mVcdFile, icmp_ln49_fu_131_p2, "icmp_ln49_fu_131_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_51, "ap_condition_51");
    sc_trace(mVcdFile, ap_condition_65, "ap_condition_65");
    sc_trace(mVcdFile, ap_condition_74, "ap_condition_74");
#endif

    }
    mHdltvinHandle.open("ov7670_interface.hdltvin.dat");
    mHdltvoutHandle.open("ov7670_interface.hdltvout.dat");
}

ov7670_interface::~ov7670_interface() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void ov7670_interface::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        count_lines = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            if (esl_seteq<1,1,1>(ap_condition_65.read(), ap_const_boolean_1)) {
                count_lines = add_ln44_fu_165_p2.read();
            } else if (esl_seteq<1,1,1>(ap_condition_51.read(), ap_const_boolean_1)) {
                count_lines = ap_const_lv32_0;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        count_readings = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            if (esl_seteq<1,1,1>(ap_condition_74.read(), ap_const_boolean_1)) {
                count_readings = add_ln38_fu_177_p2.read();
            } else if (esl_seteq<1,1,1>(ap_condition_65.read(), ap_const_boolean_1)) {
                count_readings = ap_const_lv32_0;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        first = ap_const_lv1_1;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
             (esl_seteq<1,1,1>(ap_const_lv1_0, first_load_load_fu_99_p1.read()) || 
              esl_seteq<1,1,1>(ap_const_lv1_1, vsync_V_read_read_fu_54_p2.read())))) {
            first = ap_const_lv1_0;
        }
    }
}

void ov7670_interface::thread_add_ln38_fu_177_p2() {
    add_ln38_fu_177_p2 = (!count_readings.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(count_readings.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void ov7670_interface::thread_add_ln44_fu_165_p2() {
    add_ln44_fu_165_p2 = (!count_lines.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(count_lines.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void ov7670_interface::thread_and_ln30_fu_125_p2() {
    and_ln30_fu_125_p2 = (icmp_ln30_fu_119_p2.read() & xor_ln30_fu_109_p2.read());
}

void ov7670_interface::thread_and_ln49_fu_137_p2() {
    and_ln49_fu_137_p2 = (icmp_ln49_fu_131_p2.read() & xor_ln30_fu_109_p2.read());
}

void ov7670_interface::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void ov7670_interface::thread_ap_condition_51() {
    ap_condition_51 = ((esl_seteq<1,1,1>(ap_const_lv1_0, first_load_load_fu_99_p1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, and_ln30_fu_125_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, and_ln49_fu_137_p2.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, vsync_V_read_read_fu_54_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, and_ln30_fu_125_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, and_ln49_fu_137_p2.read())));
}

void ov7670_interface::thread_ap_condition_65() {
    ap_condition_65 = ((esl_seteq<1,1,1>(ap_const_lv1_0, first_load_load_fu_99_p1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, and_ln30_fu_125_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, href_V_read_read_fu_60_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_153_p2.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, vsync_V_read_read_fu_54_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, and_ln30_fu_125_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, href_V_read_read_fu_60_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln40_fu_153_p2.read())));
}

void ov7670_interface::thread_ap_condition_74() {
    ap_condition_74 = ((esl_seteq<1,1,1>(ap_const_lv1_0, first_load_load_fu_99_p1.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, and_ln30_fu_125_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, href_V_read_read_fu_60_p2.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, vsync_V_read_read_fu_54_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, and_ln30_fu_125_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, href_V_read_read_fu_60_p2.read())));
}

void ov7670_interface::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void ov7670_interface::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void ov7670_interface::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void ov7670_interface::thread_data_out_V() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        if (esl_seteq<1,1,1>(ap_condition_74.read(), ap_const_boolean_1)) {
            data_out_V = data_in_V.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, vsync_V_read_read_fu_54_p2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, first_load_load_fu_99_p1.read()))) {
            data_out_V = ap_const_lv8_0;
        } else {
            data_out_V = "XXXXXXXX";
        }
    } else {
        data_out_V = "XXXXXXXX";
    }
}

void ov7670_interface::thread_first_load_load_fu_99_p1() {
    first_load_load_fu_99_p1 = first.read();
}

void ov7670_interface::thread_frame_valid_V() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         ((esl_seteq<1,1,1>(ap_const_lv1_0, first_load_load_fu_99_p1.read()) && 
           esl_seteq<1,1,1>(ap_const_lv1_1, and_ln30_fu_125_p2.read())) || 
          (esl_seteq<1,1,1>(ap_const_lv1_1, vsync_V_read_read_fu_54_p2.read()) && 
           esl_seteq<1,1,1>(ap_const_lv1_1, and_ln30_fu_125_p2.read()))))) {
        frame_valid_V = ap_const_lv1_1;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, vsync_V_read_read_fu_54_p2.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, first_load_load_fu_99_p1.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                 ((esl_seteq<1,1,1>(ap_const_lv1_0, first_load_load_fu_99_p1.read()) && 
                   esl_seteq<1,1,1>(ap_const_lv1_0, and_ln30_fu_125_p2.read())) || 
                  (esl_seteq<1,1,1>(ap_const_lv1_1, vsync_V_read_read_fu_54_p2.read()) && 
                   esl_seteq<1,1,1>(ap_const_lv1_0, and_ln30_fu_125_p2.read())))))) {
        frame_valid_V = ap_const_lv1_0;
    } else {
        frame_valid_V =  (sc_lv<1>) ("X");
    }
}

void ov7670_interface::thread_href_V_read_read_fu_60_p2() {
    href_V_read_read_fu_60_p2 = href_V.read();
}

void ov7670_interface::thread_icmp_ln30_fu_119_p2() {
    icmp_ln30_fu_119_p2 = (!count_lines.read().is_01() || !ap_const_lv32_1E0.is_01())? sc_lv<1>(): (sc_biguint<32>(count_lines.read()) < sc_biguint<32>(ap_const_lv32_1E0));
}

void ov7670_interface::thread_icmp_ln40_fu_153_p2() {
    icmp_ln40_fu_153_p2 = (!count_readings.read().is_01() || !ap_const_lv32_500.is_01())? sc_lv<1>(): sc_lv<1>(count_readings.read() == ap_const_lv32_500);
}

void ov7670_interface::thread_icmp_ln49_fu_131_p2() {
    icmp_ln49_fu_131_p2 = (!count_lines.read().is_01() || !ap_const_lv32_1E0.is_01())? sc_lv<1>(): sc_lv<1>(count_lines.read() == ap_const_lv32_1E0);
}

void ov7670_interface::thread_line_valid_V() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         ((esl_seteq<1,1,1>(ap_const_lv1_0, first_load_load_fu_99_p1.read()) && 
           esl_seteq<1,1,1>(ap_const_lv1_1, and_ln30_fu_125_p2.read()) && 
           esl_seteq<1,1,1>(ap_const_lv1_1, href_V_read_read_fu_60_p2.read())) || 
          (esl_seteq<1,1,1>(ap_const_lv1_1, vsync_V_read_read_fu_54_p2.read()) && 
           esl_seteq<1,1,1>(ap_const_lv1_1, and_ln30_fu_125_p2.read()) && 
           esl_seteq<1,1,1>(ap_const_lv1_1, href_V_read_read_fu_60_p2.read()))))) {
        line_valid_V = ap_const_lv1_1;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, vsync_V_read_read_fu_54_p2.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, first_load_load_fu_99_p1.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
                 ((esl_seteq<1,1,1>(ap_const_lv1_0, first_load_load_fu_99_p1.read()) && 
                   esl_seteq<1,1,1>(ap_const_lv1_1, and_ln30_fu_125_p2.read()) && 
                   esl_seteq<1,1,1>(ap_const_lv1_0, href_V_read_read_fu_60_p2.read())) || 
                  (esl_seteq<1,1,1>(ap_const_lv1_1, vsync_V_read_read_fu_54_p2.read()) && 
                   esl_seteq<1,1,1>(ap_const_lv1_1, and_ln30_fu_125_p2.read()) && 
                   esl_seteq<1,1,1>(ap_const_lv1_0, href_V_read_read_fu_60_p2.read())))))) {
        line_valid_V = ap_const_lv1_0;
    } else {
        line_valid_V =  (sc_lv<1>) ("X");
    }
}

void ov7670_interface::thread_vsync_V_read_read_fu_54_p2() {
    vsync_V_read_read_fu_54_p2 = vsync_V.read();
}

void ov7670_interface::thread_xor_ln30_fu_109_p2() {
    xor_ln30_fu_109_p2 = (vsync_V.read() ^ ap_const_lv1_1);
}

void ov7670_interface::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

void ov7670_interface::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data_in_V\" :  \"" << data_in_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"href_V\" :  \"" << href_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"vsync_V\" :  \"" << vsync_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"data_out_V\" :  \"" << data_out_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"line_valid_V\" :  \"" << line_valid_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"frame_valid_V\" :  \"" << frame_valid_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

