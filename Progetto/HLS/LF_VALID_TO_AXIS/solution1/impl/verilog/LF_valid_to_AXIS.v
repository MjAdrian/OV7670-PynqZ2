// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="LF_valid_to_AXIS,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=26,HLS_SYN_LUT=70,HLS_VERSION=2019_1}" *)

module LF_valid_to_AXIS (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_in_V,
        frame_valid,
        line_valid,
        outputStream_V_V_TDATA,
        outputStream_V_V_TVALID,
        outputStream_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] data_in_V;
input   frame_valid;
input   line_valid;
output  [7:0] outputStream_V_V_TDATA;
output   outputStream_V_V_TVALID;
input   outputStream_V_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] outputStream_V_V_1_data_out;
reg    outputStream_V_V_1_vld_in;
wire    outputStream_V_V_1_vld_out;
wire    outputStream_V_V_1_ack_in;
wire    outputStream_V_V_1_ack_out;
reg   [7:0] outputStream_V_V_1_payload_A;
reg   [7:0] outputStream_V_V_1_payload_B;
reg    outputStream_V_V_1_sel_rd;
reg    outputStream_V_V_1_sel_wr;
wire    outputStream_V_V_1_sel;
wire    outputStream_V_V_1_load_A;
wire    outputStream_V_V_1_load_B;
reg   [1:0] outputStream_V_V_1_state;
wire    outputStream_V_V_1_state_cmp_full;
reg   [0:0] res;
reg    outputStream_V_V_TDATA_blk_n;
wire   [0:0] res_load_load_fu_64_p1;
wire   [0:0] frame_valid_read_read_fu_38_p2;
wire   [0:0] line_valid_read_read_fu_44_p2;
wire    ap_CS_fsm_state2;
reg   [0:0] res_load_reg_74;
reg   [0:0] frame_valid_read_reg_78;
reg   [0:0] line_valid_read_reg_82;
reg    ap_predicate_op19_write_state1;
reg    ap_block_state1_io;
reg    ap_block_state2;
reg    ap_predicate_op24_write_state2;
reg    ap_block_state2_io;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 outputStream_V_V_1_sel_rd = 1'b0;
#0 outputStream_V_V_1_sel_wr = 1'b0;
#0 outputStream_V_V_1_state = 2'd0;
#0 res = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((outputStream_V_V_1_ack_out == 1'b1) & (outputStream_V_V_1_vld_out == 1'b1))) begin
            outputStream_V_V_1_sel_rd <= ~outputStream_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((outputStream_V_V_1_ack_in == 1'b1) & (outputStream_V_V_1_vld_in == 1'b1))) begin
            outputStream_V_V_1_sel_wr <= ~outputStream_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        outputStream_V_V_1_state <= 2'd0;
    end else begin
        if ((((outputStream_V_V_1_state == 2'd2) & (outputStream_V_V_1_vld_in == 1'b0)) | ((outputStream_V_V_1_state == 2'd3) & (outputStream_V_V_1_vld_in == 1'b0) & (outputStream_V_V_1_ack_out == 1'b1)))) begin
            outputStream_V_V_1_state <= 2'd2;
        end else if ((((outputStream_V_V_1_state == 2'd1) & (outputStream_V_V_TREADY == 1'b0)) | ((outputStream_V_V_1_state == 2'd3) & (outputStream_V_V_TREADY == 1'b0) & (outputStream_V_V_1_vld_in == 1'b1)))) begin
            outputStream_V_V_1_state <= 2'd1;
        end else if (((~((outputStream_V_V_1_vld_in == 1'b0) & (outputStream_V_V_1_ack_out == 1'b1)) & ~((outputStream_V_V_TREADY == 1'b0) & (outputStream_V_V_1_vld_in == 1'b1)) & (outputStream_V_V_1_state == 2'd3)) | ((outputStream_V_V_1_state == 2'd1) & (outputStream_V_V_1_ack_out == 1'b1)) | ((outputStream_V_V_1_state == 2'd2) & (outputStream_V_V_1_vld_in == 1'b1)))) begin
            outputStream_V_V_1_state <= 2'd3;
        end else begin
            outputStream_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
        frame_valid_read_reg_78 <= frame_valid;
        res_load_reg_74 <= res;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io)) & (frame_valid_read_read_fu_38_p2 == 1'd1) & (res == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        line_valid_read_reg_82 <= line_valid;
    end
end

always @ (posedge ap_clk) begin
    if ((outputStream_V_V_1_load_A == 1'b1)) begin
        outputStream_V_V_1_payload_A <= data_in_V;
    end
end

always @ (posedge ap_clk) begin
    if ((outputStream_V_V_1_load_B == 1'b1)) begin
        outputStream_V_V_1_payload_B <= data_in_V;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io)) & (res_load_load_fu_64_p1 == 1'd1) & (frame_valid_read_read_fu_38_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        res <= 1'd0;
    end
end

always @ (*) begin
    if ((~((outputStream_V_V_1_state == 2'd1) | (1'b1 == ap_block_state2_io) | ((outputStream_V_V_1_state == 2'd3) & (outputStream_V_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((outputStream_V_V_1_state == 2'd1) | (1'b1 == ap_block_state2_io) | ((outputStream_V_V_1_state == 2'd3) & (outputStream_V_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((outputStream_V_V_1_sel == 1'b1)) begin
        outputStream_V_V_1_data_out = outputStream_V_V_1_payload_B;
    end else begin
        outputStream_V_V_1_data_out = outputStream_V_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1) & (ap_predicate_op19_write_state1 == 1'b1))) begin
        outputStream_V_V_1_vld_in = 1'b1;
    end else begin
        outputStream_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (frame_valid_read_read_fu_38_p2 == 1'd1) & (line_valid_read_read_fu_44_p2 == 1'd1) & (res == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((line_valid_read_reg_82 == 1'd1) & (frame_valid_read_reg_78 == 1'd1) & (res_load_reg_74 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        outputStream_V_V_TDATA_blk_n = outputStream_V_V_1_state[1'd1];
    end else begin
        outputStream_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (1'b1 == ap_block_state1_io)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((outputStream_V_V_1_state == 2'd1) | (1'b1 == ap_block_state2_io) | ((outputStream_V_V_1_state == 2'd3) & (outputStream_V_V_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_io = ((outputStream_V_V_1_ack_in == 1'b0) & (ap_predicate_op19_write_state1 == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((outputStream_V_V_1_state == 2'd1) | ((outputStream_V_V_1_state == 2'd3) & (outputStream_V_V_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state2_io = ((outputStream_V_V_1_ack_in == 1'b0) & (ap_predicate_op24_write_state2 == 1'b1));
end

always @ (*) begin
    ap_predicate_op19_write_state1 = ((frame_valid_read_read_fu_38_p2 == 1'd1) & (line_valid_read_read_fu_44_p2 == 1'd1) & (res == 1'd0));
end

always @ (*) begin
    ap_predicate_op24_write_state2 = ((line_valid_read_reg_82 == 1'd1) & (frame_valid_read_reg_78 == 1'd1) & (res_load_reg_74 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign frame_valid_read_read_fu_38_p2 = frame_valid;

assign line_valid_read_read_fu_44_p2 = line_valid;

assign outputStream_V_V_1_ack_in = outputStream_V_V_1_state[1'd1];

assign outputStream_V_V_1_ack_out = outputStream_V_V_TREADY;

assign outputStream_V_V_1_load_A = (outputStream_V_V_1_state_cmp_full & ~outputStream_V_V_1_sel_wr);

assign outputStream_V_V_1_load_B = (outputStream_V_V_1_state_cmp_full & outputStream_V_V_1_sel_wr);

assign outputStream_V_V_1_sel = outputStream_V_V_1_sel_rd;

assign outputStream_V_V_1_state_cmp_full = ((outputStream_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign outputStream_V_V_1_vld_out = outputStream_V_V_1_state[1'd0];

assign outputStream_V_V_TDATA = outputStream_V_V_1_data_out;

assign outputStream_V_V_TVALID = outputStream_V_V_1_state[1'd0];

assign res_load_load_fu_64_p1 = res;

endmodule //LF_valid_to_AXIS
