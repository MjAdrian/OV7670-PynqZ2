// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "axistream2axivideo.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic axistream2axivideo::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic axistream2axivideo::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> axistream2axivideo::ap_ST_fsm_pp0_stage0 = "1";
const sc_lv<32> axistream2axivideo::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool axistream2axivideo::ap_const_boolean_1 = true;
const sc_lv<2> axistream2axivideo::ap_const_lv2_0 = "00";
const sc_lv<2> axistream2axivideo::ap_const_lv2_2 = "10";
const sc_lv<2> axistream2axivideo::ap_const_lv2_3 = "11";
const sc_lv<2> axistream2axivideo::ap_const_lv2_1 = "1";
const bool axistream2axivideo::ap_const_boolean_0 = false;
const sc_lv<1> axistream2axivideo::ap_const_lv1_0 = "0";
const sc_lv<1> axistream2axivideo::ap_const_lv1_1 = "1";
const sc_lv<16> axistream2axivideo::ap_const_lv16_0 = "0000000000000000";
const sc_lv<9> axistream2axivideo::ap_const_lv9_0 = "000000000";
const sc_lv<16> axistream2axivideo::ap_const_lv16_1 = "1";
const sc_lv<32> axistream2axivideo::ap_const_lv32_9 = "1001";
const sc_lv<32> axistream2axivideo::ap_const_lv32_F = "1111";
const sc_lv<16> axistream2axivideo::ap_const_lv16_280 = "1010000000";
const sc_lv<9> axistream2axivideo::ap_const_lv9_1 = "1";
const sc_lv<9> axistream2axivideo::ap_const_lv9_1DF = "111011111";

axistream2axivideo::axistream2axivideo(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln700_1_fu_253_p2);
    sensitive << ( lines_V );

    SC_METHOD(thread_add_ln700_fu_194_p2);
    sensitive << ( pixels_V );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( inStream_V_data_V_0_vld_out );
    sensitive << ( outStream_TREADY );
    sensitive << ( outStream_V_data_V_1_state );
    sensitive << ( outStream_V_keep_V_1_state );
    sensitive << ( outStream_V_strb_V_1_state );
    sensitive << ( outStream_V_user_V_1_state );
    sensitive << ( outStream_V_last_V_1_state );
    sensitive << ( outStream_V_id_V_1_state );
    sensitive << ( outStream_V_dest_V_1_state );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( inStream_V_data_V_0_vld_out );
    sensitive << ( outStream_TREADY );
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_data_V_1_state );
    sensitive << ( outStream_V_keep_V_1_state );
    sensitive << ( outStream_V_strb_V_1_state );
    sensitive << ( outStream_V_user_V_1_state );
    sensitive << ( outStream_V_last_V_1_state );
    sensitive << ( outStream_V_id_V_1_state );
    sensitive << ( outStream_V_dest_V_1_state );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_start );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( inStream_V_data_V_0_vld_out );
    sensitive << ( outStream_TREADY );
    sensitive << ( outStream_V_data_V_1_ack_in );
    sensitive << ( outStream_V_data_V_1_state );
    sensitive << ( outStream_V_keep_V_1_state );
    sensitive << ( outStream_V_strb_V_1_state );
    sensitive << ( outStream_V_user_V_1_state );
    sensitive << ( outStream_V_last_V_1_state );
    sensitive << ( outStream_V_id_V_1_state );
    sensitive << ( outStream_V_dest_V_1_state );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );
    sensitive << ( inStream_V_data_V_0_vld_out );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( outStream_TREADY );
    sensitive << ( outStream_V_data_V_1_state );
    sensitive << ( outStream_V_keep_V_1_state );
    sensitive << ( outStream_V_strb_V_1_state );
    sensitive << ( outStream_V_user_V_1_state );
    sensitive << ( outStream_V_last_V_1_state );
    sensitive << ( outStream_V_id_V_1_state );
    sensitive << ( outStream_V_dest_V_1_state );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_idle_pp0_0to0);
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_phi_mux_pixels_V_new_1_phi_fu_134_p8);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( add_ln700_fu_194_p2 );
    sensitive << ( ap_phi_reg_pp0_iter0_pixels_V_new_1_reg_131 );
    sensitive << ( icmp_ln16_fu_235_p2 );
    sensitive << ( icmp_ln887_fu_241_p2 );
    sensitive << ( icmp_ln879_fu_247_p2 );

    SC_METHOD(thread_ap_phi_mux_tmp_last_V_phi_fu_169_p8);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln16_fu_235_p2 );
    sensitive << ( icmp_ln887_fu_241_p2 );
    sensitive << ( icmp_ln879_fu_247_p2 );
    sensitive << ( ap_phi_reg_pp0_iter0_tmp_last_V_reg_165 );

    SC_METHOD(thread_ap_phi_mux_tmp_user_V_phi_fu_149_p8);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln16_fu_235_p2 );
    sensitive << ( icmp_ln887_fu_241_p2 );
    sensitive << ( icmp_ln879_fu_247_p2 );
    sensitive << ( ap_phi_reg_pp0_iter0_tmp_user_V_reg_145 );

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_pixels_V_new_1_reg_131);

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_tmp_last_V_reg_165);

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_tmp_user_V_reg_145);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to0 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_icmp_ln16_fu_235_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( or_ln_fu_227_p3 );

    SC_METHOD(thread_icmp_ln879_fu_247_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( add_ln700_fu_194_p2 );
    sensitive << ( icmp_ln16_fu_235_p2 );
    sensitive << ( icmp_ln887_fu_241_p2 );

    SC_METHOD(thread_icmp_ln887_fu_241_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( add_ln700_fu_194_p2 );
    sensitive << ( icmp_ln16_fu_235_p2 );

    SC_METHOD(thread_icmp_ln891_fu_259_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln16_fu_235_p2 );
    sensitive << ( icmp_ln887_fu_241_p2 );
    sensitive << ( icmp_ln879_fu_247_p2 );
    sensitive << ( add_ln700_1_fu_253_p2 );

    SC_METHOD(thread_inStream_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( inStream_V_data_V_0_state );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_inStream_TREADY);
    sensitive << ( inStream_V_dest_V_0_state );

    SC_METHOD(thread_inStream_V_data_V_0_ack_in);
    sensitive << ( inStream_V_data_V_0_state );

    SC_METHOD(thread_inStream_V_data_V_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_inStream_V_data_V_0_data_out);
    sensitive << ( inStream_V_data_V_0_payload_A );
    sensitive << ( inStream_V_data_V_0_payload_B );
    sensitive << ( inStream_V_data_V_0_sel );

    SC_METHOD(thread_inStream_V_data_V_0_load_A);
    sensitive << ( inStream_V_data_V_0_sel_wr );
    sensitive << ( inStream_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_data_V_0_load_B);
    sensitive << ( inStream_V_data_V_0_sel_wr );
    sensitive << ( inStream_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_inStream_V_data_V_0_sel);
    sensitive << ( inStream_V_data_V_0_sel_rd );

    SC_METHOD(thread_inStream_V_data_V_0_state_cmp_full);
    sensitive << ( inStream_V_data_V_0_state );

    SC_METHOD(thread_inStream_V_data_V_0_vld_in);
    sensitive << ( inStream_TVALID );

    SC_METHOD(thread_inStream_V_data_V_0_vld_out);
    sensitive << ( inStream_V_data_V_0_state );

    SC_METHOD(thread_inStream_V_dest_V_0_ack_out);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_inStream_V_dest_V_0_vld_in);
    sensitive << ( inStream_TVALID );

    SC_METHOD(thread_or_ln16_fu_211_p2);
    sensitive << ( lines_V );
    sensitive << ( trunc_ln16_fu_207_p1 );

    SC_METHOD(thread_or_ln_fu_227_p3);
    sensitive << ( tmp_fu_217_p4 );
    sensitive << ( or_ln16_fu_211_p2 );

    SC_METHOD(thread_outStream_TDATA);
    sensitive << ( outStream_V_data_V_1_data_out );

    SC_METHOD(thread_outStream_TDATA_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( outStream_V_data_V_1_state );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_outStream_TDEST);
    sensitive << ( outStream_V_dest_V_1_data_out );

    SC_METHOD(thread_outStream_TID);
    sensitive << ( outStream_V_id_V_1_data_out );

    SC_METHOD(thread_outStream_TKEEP);
    sensitive << ( outStream_V_keep_V_1_data_out );

    SC_METHOD(thread_outStream_TLAST);
    sensitive << ( outStream_V_last_V_1_data_out );

    SC_METHOD(thread_outStream_TSTRB);
    sensitive << ( outStream_V_strb_V_1_data_out );

    SC_METHOD(thread_outStream_TUSER);
    sensitive << ( outStream_V_user_V_1_data_out );

    SC_METHOD(thread_outStream_TVALID);
    sensitive << ( outStream_V_dest_V_1_state );

    SC_METHOD(thread_outStream_V_data_V_1_ack_in);
    sensitive << ( outStream_V_data_V_1_state );

    SC_METHOD(thread_outStream_V_data_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_data_V_1_data_out);
    sensitive << ( outStream_V_data_V_1_payload_A );
    sensitive << ( outStream_V_data_V_1_payload_B );
    sensitive << ( outStream_V_data_V_1_sel );

    SC_METHOD(thread_outStream_V_data_V_1_load_A);
    sensitive << ( outStream_V_data_V_1_sel_wr );
    sensitive << ( outStream_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_data_V_1_load_B);
    sensitive << ( outStream_V_data_V_1_sel_wr );
    sensitive << ( outStream_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_data_V_1_sel);
    sensitive << ( outStream_V_data_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_data_V_1_state_cmp_full);
    sensitive << ( outStream_V_data_V_1_state );

    SC_METHOD(thread_outStream_V_data_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_outStream_V_data_V_1_vld_out);
    sensitive << ( outStream_V_data_V_1_state );

    SC_METHOD(thread_outStream_V_dest_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_dest_V_1_data_out);
    sensitive << ( outStream_V_dest_V_1_sel );

    SC_METHOD(thread_outStream_V_dest_V_1_sel);
    sensitive << ( outStream_V_dest_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_dest_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_outStream_V_dest_V_1_vld_out);
    sensitive << ( outStream_V_dest_V_1_state );

    SC_METHOD(thread_outStream_V_id_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_id_V_1_data_out);
    sensitive << ( outStream_V_id_V_1_sel );

    SC_METHOD(thread_outStream_V_id_V_1_sel);
    sensitive << ( outStream_V_id_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_id_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_outStream_V_id_V_1_vld_out);
    sensitive << ( outStream_V_id_V_1_state );

    SC_METHOD(thread_outStream_V_keep_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_keep_V_1_data_out);
    sensitive << ( outStream_V_keep_V_1_sel );

    SC_METHOD(thread_outStream_V_keep_V_1_sel);
    sensitive << ( outStream_V_keep_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_keep_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_outStream_V_keep_V_1_vld_out);
    sensitive << ( outStream_V_keep_V_1_state );

    SC_METHOD(thread_outStream_V_last_V_1_ack_in);
    sensitive << ( outStream_V_last_V_1_state );

    SC_METHOD(thread_outStream_V_last_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_last_V_1_data_out);
    sensitive << ( outStream_V_last_V_1_payload_A );
    sensitive << ( outStream_V_last_V_1_payload_B );
    sensitive << ( outStream_V_last_V_1_sel );

    SC_METHOD(thread_outStream_V_last_V_1_load_A);
    sensitive << ( outStream_V_last_V_1_sel_wr );
    sensitive << ( outStream_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_last_V_1_load_B);
    sensitive << ( outStream_V_last_V_1_sel_wr );
    sensitive << ( outStream_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_last_V_1_sel);
    sensitive << ( outStream_V_last_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_last_V_1_state_cmp_full);
    sensitive << ( outStream_V_last_V_1_state );

    SC_METHOD(thread_outStream_V_last_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_outStream_V_last_V_1_vld_out);
    sensitive << ( outStream_V_last_V_1_state );

    SC_METHOD(thread_outStream_V_strb_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_strb_V_1_data_out);
    sensitive << ( outStream_V_strb_V_1_sel );

    SC_METHOD(thread_outStream_V_strb_V_1_sel);
    sensitive << ( outStream_V_strb_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_strb_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_outStream_V_strb_V_1_vld_out);
    sensitive << ( outStream_V_strb_V_1_state );

    SC_METHOD(thread_outStream_V_user_V_1_ack_in);
    sensitive << ( outStream_V_user_V_1_state );

    SC_METHOD(thread_outStream_V_user_V_1_ack_out);
    sensitive << ( outStream_TREADY );

    SC_METHOD(thread_outStream_V_user_V_1_data_out);
    sensitive << ( outStream_V_user_V_1_payload_A );
    sensitive << ( outStream_V_user_V_1_payload_B );
    sensitive << ( outStream_V_user_V_1_sel );

    SC_METHOD(thread_outStream_V_user_V_1_load_A);
    sensitive << ( outStream_V_user_V_1_sel_wr );
    sensitive << ( outStream_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_user_V_1_load_B);
    sensitive << ( outStream_V_user_V_1_sel_wr );
    sensitive << ( outStream_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_outStream_V_user_V_1_sel);
    sensitive << ( outStream_V_user_V_1_sel_rd );

    SC_METHOD(thread_outStream_V_user_V_1_state_cmp_full);
    sensitive << ( outStream_V_user_V_1_state );

    SC_METHOD(thread_outStream_V_user_V_1_vld_in);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_outStream_V_user_V_1_vld_out);
    sensitive << ( outStream_V_user_V_1_state );

    SC_METHOD(thread_select_ln28_fu_265_p3);
    sensitive << ( add_ln700_1_fu_253_p2 );
    sensitive << ( icmp_ln891_fu_259_p2 );

    SC_METHOD(thread_tmp_fu_217_p4);
    sensitive << ( pixels_V );

    SC_METHOD(thread_trunc_ln16_fu_207_p1);
    sensitive << ( pixels_V );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    outStream_V_data_V_1_state = "00";
    outStream_V_keep_V_1_state = "00";
    outStream_V_strb_V_1_state = "00";
    outStream_V_user_V_1_state = "00";
    outStream_V_last_V_1_state = "00";
    outStream_V_id_V_1_state = "00";
    outStream_V_dest_V_1_state = "00";
    inStream_V_data_V_0_sel_rd = SC_LOGIC_0;
    inStream_V_data_V_0_sel_wr = SC_LOGIC_0;
    inStream_V_data_V_0_state = "00";
    inStream_V_dest_V_0_state = "00";
    outStream_V_data_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_data_V_1_sel_wr = SC_LOGIC_0;
    outStream_V_keep_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_strb_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_user_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_user_V_1_sel_wr = SC_LOGIC_0;
    outStream_V_last_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_last_V_1_sel_wr = SC_LOGIC_0;
    outStream_V_id_V_1_sel_rd = SC_LOGIC_0;
    outStream_V_dest_V_1_sel_rd = SC_LOGIC_0;
    pixels_V = "0000000000000000";
    lines_V = "000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "axistream2axivideo_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, outStream_TREADY, "(port)outStream_TREADY");
    sc_trace(mVcdFile, inStream_TDATA, "(port)inStream_TDATA");
    sc_trace(mVcdFile, inStream_TVALID, "(port)inStream_TVALID");
    sc_trace(mVcdFile, inStream_TREADY, "(port)inStream_TREADY");
    sc_trace(mVcdFile, inStream_TKEEP, "(port)inStream_TKEEP");
    sc_trace(mVcdFile, inStream_TSTRB, "(port)inStream_TSTRB");
    sc_trace(mVcdFile, inStream_TUSER, "(port)inStream_TUSER");
    sc_trace(mVcdFile, inStream_TLAST, "(port)inStream_TLAST");
    sc_trace(mVcdFile, inStream_TID, "(port)inStream_TID");
    sc_trace(mVcdFile, inStream_TDEST, "(port)inStream_TDEST");
    sc_trace(mVcdFile, outStream_TDATA, "(port)outStream_TDATA");
    sc_trace(mVcdFile, outStream_TVALID, "(port)outStream_TVALID");
    sc_trace(mVcdFile, outStream_TKEEP, "(port)outStream_TKEEP");
    sc_trace(mVcdFile, outStream_TSTRB, "(port)outStream_TSTRB");
    sc_trace(mVcdFile, outStream_TUSER, "(port)outStream_TUSER");
    sc_trace(mVcdFile, outStream_TLAST, "(port)outStream_TLAST");
    sc_trace(mVcdFile, outStream_TID, "(port)outStream_TID");
    sc_trace(mVcdFile, outStream_TDEST, "(port)outStream_TDEST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, inStream_V_data_V_0_vld_out, "inStream_V_data_V_0_vld_out");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, outStream_V_data_V_1_ack_in, "outStream_V_data_V_1_ack_in");
    sc_trace(mVcdFile, outStream_V_data_V_1_ack_out, "outStream_V_data_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_data_V_1_state, "outStream_V_data_V_1_state");
    sc_trace(mVcdFile, outStream_V_keep_V_1_ack_out, "outStream_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_keep_V_1_state, "outStream_V_keep_V_1_state");
    sc_trace(mVcdFile, outStream_V_strb_V_1_ack_out, "outStream_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_strb_V_1_state, "outStream_V_strb_V_1_state");
    sc_trace(mVcdFile, outStream_V_user_V_1_ack_out, "outStream_V_user_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_user_V_1_state, "outStream_V_user_V_1_state");
    sc_trace(mVcdFile, outStream_V_last_V_1_ack_out, "outStream_V_last_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_last_V_1_state, "outStream_V_last_V_1_state");
    sc_trace(mVcdFile, outStream_V_id_V_1_ack_out, "outStream_V_id_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_id_V_1_state, "outStream_V_id_V_1_state");
    sc_trace(mVcdFile, outStream_V_dest_V_1_ack_out, "outStream_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, outStream_V_dest_V_1_state, "outStream_V_dest_V_1_state");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, inStream_V_data_V_0_data_out, "inStream_V_data_V_0_data_out");
    sc_trace(mVcdFile, inStream_V_data_V_0_vld_in, "inStream_V_data_V_0_vld_in");
    sc_trace(mVcdFile, inStream_V_data_V_0_ack_in, "inStream_V_data_V_0_ack_in");
    sc_trace(mVcdFile, inStream_V_data_V_0_ack_out, "inStream_V_data_V_0_ack_out");
    sc_trace(mVcdFile, inStream_V_data_V_0_payload_A, "inStream_V_data_V_0_payload_A");
    sc_trace(mVcdFile, inStream_V_data_V_0_payload_B, "inStream_V_data_V_0_payload_B");
    sc_trace(mVcdFile, inStream_V_data_V_0_sel_rd, "inStream_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, inStream_V_data_V_0_sel_wr, "inStream_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, inStream_V_data_V_0_sel, "inStream_V_data_V_0_sel");
    sc_trace(mVcdFile, inStream_V_data_V_0_load_A, "inStream_V_data_V_0_load_A");
    sc_trace(mVcdFile, inStream_V_data_V_0_load_B, "inStream_V_data_V_0_load_B");
    sc_trace(mVcdFile, inStream_V_data_V_0_state, "inStream_V_data_V_0_state");
    sc_trace(mVcdFile, inStream_V_data_V_0_state_cmp_full, "inStream_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, inStream_V_dest_V_0_vld_in, "inStream_V_dest_V_0_vld_in");
    sc_trace(mVcdFile, inStream_V_dest_V_0_ack_out, "inStream_V_dest_V_0_ack_out");
    sc_trace(mVcdFile, inStream_V_dest_V_0_state, "inStream_V_dest_V_0_state");
    sc_trace(mVcdFile, outStream_V_data_V_1_data_out, "outStream_V_data_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_data_V_1_vld_in, "outStream_V_data_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_data_V_1_vld_out, "outStream_V_data_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_data_V_1_payload_A, "outStream_V_data_V_1_payload_A");
    sc_trace(mVcdFile, outStream_V_data_V_1_payload_B, "outStream_V_data_V_1_payload_B");
    sc_trace(mVcdFile, outStream_V_data_V_1_sel_rd, "outStream_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_data_V_1_sel_wr, "outStream_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_V_data_V_1_sel, "outStream_V_data_V_1_sel");
    sc_trace(mVcdFile, outStream_V_data_V_1_load_A, "outStream_V_data_V_1_load_A");
    sc_trace(mVcdFile, outStream_V_data_V_1_load_B, "outStream_V_data_V_1_load_B");
    sc_trace(mVcdFile, outStream_V_data_V_1_state_cmp_full, "outStream_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, outStream_V_keep_V_1_data_out, "outStream_V_keep_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_keep_V_1_vld_in, "outStream_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_keep_V_1_vld_out, "outStream_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_keep_V_1_sel_rd, "outStream_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_keep_V_1_sel, "outStream_V_keep_V_1_sel");
    sc_trace(mVcdFile, outStream_V_strb_V_1_data_out, "outStream_V_strb_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_strb_V_1_vld_in, "outStream_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_strb_V_1_vld_out, "outStream_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_strb_V_1_sel_rd, "outStream_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_strb_V_1_sel, "outStream_V_strb_V_1_sel");
    sc_trace(mVcdFile, outStream_V_user_V_1_data_out, "outStream_V_user_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_user_V_1_vld_in, "outStream_V_user_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_user_V_1_vld_out, "outStream_V_user_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_user_V_1_ack_in, "outStream_V_user_V_1_ack_in");
    sc_trace(mVcdFile, outStream_V_user_V_1_payload_A, "outStream_V_user_V_1_payload_A");
    sc_trace(mVcdFile, outStream_V_user_V_1_payload_B, "outStream_V_user_V_1_payload_B");
    sc_trace(mVcdFile, outStream_V_user_V_1_sel_rd, "outStream_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_user_V_1_sel_wr, "outStream_V_user_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_V_user_V_1_sel, "outStream_V_user_V_1_sel");
    sc_trace(mVcdFile, outStream_V_user_V_1_load_A, "outStream_V_user_V_1_load_A");
    sc_trace(mVcdFile, outStream_V_user_V_1_load_B, "outStream_V_user_V_1_load_B");
    sc_trace(mVcdFile, outStream_V_user_V_1_state_cmp_full, "outStream_V_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, outStream_V_last_V_1_data_out, "outStream_V_last_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_last_V_1_vld_in, "outStream_V_last_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_last_V_1_vld_out, "outStream_V_last_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_last_V_1_ack_in, "outStream_V_last_V_1_ack_in");
    sc_trace(mVcdFile, outStream_V_last_V_1_payload_A, "outStream_V_last_V_1_payload_A");
    sc_trace(mVcdFile, outStream_V_last_V_1_payload_B, "outStream_V_last_V_1_payload_B");
    sc_trace(mVcdFile, outStream_V_last_V_1_sel_rd, "outStream_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_last_V_1_sel_wr, "outStream_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, outStream_V_last_V_1_sel, "outStream_V_last_V_1_sel");
    sc_trace(mVcdFile, outStream_V_last_V_1_load_A, "outStream_V_last_V_1_load_A");
    sc_trace(mVcdFile, outStream_V_last_V_1_load_B, "outStream_V_last_V_1_load_B");
    sc_trace(mVcdFile, outStream_V_last_V_1_state_cmp_full, "outStream_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, outStream_V_id_V_1_data_out, "outStream_V_id_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_id_V_1_vld_in, "outStream_V_id_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_id_V_1_vld_out, "outStream_V_id_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_id_V_1_sel_rd, "outStream_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_id_V_1_sel, "outStream_V_id_V_1_sel");
    sc_trace(mVcdFile, outStream_V_dest_V_1_data_out, "outStream_V_dest_V_1_data_out");
    sc_trace(mVcdFile, outStream_V_dest_V_1_vld_in, "outStream_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, outStream_V_dest_V_1_vld_out, "outStream_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, outStream_V_dest_V_1_sel_rd, "outStream_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, outStream_V_dest_V_1_sel, "outStream_V_dest_V_1_sel");
    sc_trace(mVcdFile, pixels_V, "pixels_V");
    sc_trace(mVcdFile, lines_V, "lines_V");
    sc_trace(mVcdFile, inStream_TDATA_blk_n, "inStream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, outStream_TDATA_blk_n, "outStream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_phi_mux_pixels_V_new_1_phi_fu_134_p8, "ap_phi_mux_pixels_V_new_1_phi_fu_134_p8");
    sc_trace(mVcdFile, add_ln700_fu_194_p2, "add_ln700_fu_194_p2");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_pixels_V_new_1_reg_131, "ap_phi_reg_pp0_iter0_pixels_V_new_1_reg_131");
    sc_trace(mVcdFile, icmp_ln16_fu_235_p2, "icmp_ln16_fu_235_p2");
    sc_trace(mVcdFile, icmp_ln887_fu_241_p2, "icmp_ln887_fu_241_p2");
    sc_trace(mVcdFile, icmp_ln879_fu_247_p2, "icmp_ln879_fu_247_p2");
    sc_trace(mVcdFile, ap_phi_mux_tmp_user_V_phi_fu_149_p8, "ap_phi_mux_tmp_user_V_phi_fu_149_p8");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_tmp_user_V_reg_145, "ap_phi_reg_pp0_iter0_tmp_user_V_reg_145");
    sc_trace(mVcdFile, ap_phi_mux_tmp_last_V_phi_fu_169_p8, "ap_phi_mux_tmp_last_V_phi_fu_169_p8");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_tmp_last_V_reg_165, "ap_phi_reg_pp0_iter0_tmp_last_V_reg_165");
    sc_trace(mVcdFile, select_ln28_fu_265_p3, "select_ln28_fu_265_p3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, trunc_ln16_fu_207_p1, "trunc_ln16_fu_207_p1");
    sc_trace(mVcdFile, tmp_fu_217_p4, "tmp_fu_217_p4");
    sc_trace(mVcdFile, or_ln16_fu_211_p2, "or_ln16_fu_211_p2");
    sc_trace(mVcdFile, or_ln_fu_227_p3, "or_ln_fu_227_p3");
    sc_trace(mVcdFile, add_ln700_1_fu_253_p2, "add_ln700_1_fu_253_p2");
    sc_trace(mVcdFile, icmp_ln891_fu_259_p2, "icmp_ln891_fu_259_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to0, "ap_idle_pp0_0to0");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("axistream2axivideo.hdltvin.dat");
    mHdltvoutHandle.open("axistream2axivideo.hdltvout.dat");
}

axistream2axivideo::~axistream2axivideo() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void axistream2axivideo::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_vld_out.read()))) {
            inStream_V_data_V_0_sel_rd =  (sc_logic) (~inStream_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_ack_in.read()))) {
            inStream_V_data_V_0_sel_wr =  (sc_logic) (~inStream_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_data_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_data_V_0_state.read())))) {
            inStream_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_data_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_data_V_0_state.read())))) {
            inStream_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_data_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_data_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_data_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_ack_out.read()))))) {
            inStream_V_data_V_0_state = ap_const_lv2_3;
        } else {
            inStream_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        inStream_V_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_dest_V_0_state.read())))) {
            inStream_V_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_dest_V_0_state.read())))) {
            inStream_V_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, inStream_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, inStream_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, inStream_V_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_dest_V_0_ack_out.read()))))) {
            inStream_V_dest_V_0_state = ap_const_lv2_3;
        } else {
            inStream_V_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_vld_out.read()))) {
            outStream_V_data_V_1_sel_rd =  (sc_logic) (~outStream_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_ack_in.read()))) {
            outStream_V_data_V_1_sel_wr =  (sc_logic) (~outStream_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,2,2>(outStream_V_data_V_1_state.read(), ap_const_lv2_3) && 
              esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_ack_out.read())) || 
             (esl_seteq<1,2,2>(outStream_V_data_V_1_state.read(), ap_const_lv2_2) && 
              esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_vld_in.read())))) {
            outStream_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
                     esl_seteq<1,2,2>(outStream_V_data_V_1_state.read(), ap_const_lv2_3) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_vld_in.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
                     esl_seteq<1,2,2>(outStream_V_data_V_1_state.read(), ap_const_lv2_1)))) {
            outStream_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,2,2>(outStream_V_data_V_1_state.read(), ap_const_lv2_2) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_vld_in.read())) || 
                    (esl_seteq<1,2,2>(outStream_V_data_V_1_state.read(), ap_const_lv2_1) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_ack_out.read())) || 
                    (esl_seteq<1,2,2>(outStream_V_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_vld_in.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_ack_out.read()))))) {
            outStream_V_data_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_vld_out.read()))) {
            outStream_V_dest_V_1_sel_rd =  (sc_logic) (~outStream_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_dest_V_1_state.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_ack_out.read())) || 
             (esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_dest_V_1_state.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_vld_in.read())))) {
            outStream_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_dest_V_1_state.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_vld_in.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_dest_V_1_state.read())))) {
            outStream_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_dest_V_1_state.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_vld_in.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_dest_V_1_state.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_ack_out.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_vld_in.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_dest_V_1_ack_out.read()))))) {
            outStream_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_vld_out.read()))) {
            outStream_V_id_V_1_sel_rd =  (sc_logic) (~outStream_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_id_V_1_state.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_ack_out.read())) || 
             (esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_id_V_1_state.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_vld_in.read())))) {
            outStream_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_id_V_1_state.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_vld_in.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_id_V_1_state.read())))) {
            outStream_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_id_V_1_state.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_vld_in.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_id_V_1_state.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_ack_out.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_vld_in.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_id_V_1_ack_out.read()))))) {
            outStream_V_id_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_vld_out.read()))) {
            outStream_V_keep_V_1_sel_rd =  (sc_logic) (~outStream_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_keep_V_1_state.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_ack_out.read())) || 
             (esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_keep_V_1_state.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_vld_in.read())))) {
            outStream_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_keep_V_1_state.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_vld_in.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_keep_V_1_state.read())))) {
            outStream_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_keep_V_1_state.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_vld_in.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_keep_V_1_state.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_ack_out.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_vld_in.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_keep_V_1_ack_out.read()))))) {
            outStream_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_vld_out.read()))) {
            outStream_V_last_V_1_sel_rd =  (sc_logic) (~outStream_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_ack_in.read()))) {
            outStream_V_last_V_1_sel_wr =  (sc_logic) (~outStream_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_last_V_1_state.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_ack_out.read())) || 
             (esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_last_V_1_state.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_vld_in.read())))) {
            outStream_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_last_V_1_state.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_vld_in.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_last_V_1_state.read())))) {
            outStream_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_last_V_1_state.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_vld_in.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_last_V_1_state.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_ack_out.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_vld_in.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_ack_out.read()))))) {
            outStream_V_last_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_vld_out.read()))) {
            outStream_V_strb_V_1_sel_rd =  (sc_logic) (~outStream_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_strb_V_1_state.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_ack_out.read())) || 
             (esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_strb_V_1_state.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_vld_in.read())))) {
            outStream_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_strb_V_1_state.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_vld_in.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_strb_V_1_state.read())))) {
            outStream_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_strb_V_1_state.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_vld_in.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_strb_V_1_state.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_ack_out.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_vld_in.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_strb_V_1_ack_out.read()))))) {
            outStream_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_vld_out.read()))) {
            outStream_V_user_V_1_sel_rd =  (sc_logic) (~outStream_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_ack_in.read()))) {
            outStream_V_user_V_1_sel_wr =  (sc_logic) (~outStream_V_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        outStream_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_user_V_1_state.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_ack_out.read())) || 
             (esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_user_V_1_state.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_vld_in.read())))) {
            outStream_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_user_V_1_state.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_vld_in.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_user_V_1_state.read())))) {
            outStream_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,2,2>(ap_const_lv2_2, outStream_V_user_V_1_state.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_vld_in.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_user_V_1_state.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_ack_out.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_vld_in.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_ack_out.read()))))) {
            outStream_V_user_V_1_state = ap_const_lv2_3;
        } else {
            outStream_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_load_A.read())) {
        inStream_V_data_V_0_payload_A = inStream_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_load_B.read())) {
        inStream_V_data_V_0_payload_B = inStream_TDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln16_fu_235_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_fu_241_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_247_p2.read()))) {
        lines_V = select_ln28_fu_265_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_load_A.read())) {
        outStream_V_data_V_1_payload_A = inStream_V_data_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_load_B.read())) {
        outStream_V_data_V_1_payload_B = inStream_V_data_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_load_A.read())) {
        outStream_V_last_V_1_payload_A = ap_phi_mux_tmp_last_V_phi_fu_169_p8.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_load_B.read())) {
        outStream_V_last_V_1_payload_B = ap_phi_mux_tmp_last_V_phi_fu_169_p8.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_load_A.read())) {
        outStream_V_user_V_1_payload_A = ap_phi_mux_tmp_user_V_phi_fu_149_p8.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_load_B.read())) {
        outStream_V_user_V_1_payload_B = ap_phi_mux_tmp_user_V_phi_fu_149_p8.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        pixels_V = ap_phi_mux_pixels_V_new_1_phi_fu_134_p8.read();
    }
}

void axistream2axivideo::thread_add_ln700_1_fu_253_p2() {
    add_ln700_1_fu_253_p2 = (!lines_V.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(lines_V.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void axistream2axivideo::thread_add_ln700_fu_194_p2() {
    add_ln700_fu_194_p2 = (!ap_const_lv16_1.is_01() || !pixels_V.read().is_01())? sc_lv<16>(): (sc_biguint<16>(ap_const_lv16_1) + sc_biguint<16>(pixels_V.read()));
}

void axistream2axivideo::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void axistream2axivideo::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void axistream2axivideo::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_vld_out.read()))) || ((esl_seteq<1,2,2>(outStream_V_data_V_1_state.read(), ap_const_lv2_1) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
    esl_seteq<1,2,2>(outStream_V_data_V_1_state.read(), ap_const_lv2_3)) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_keep_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_keep_V_1_state.read())) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_strb_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_strb_V_1_state.read())) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_user_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_user_V_1_state.read())) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_last_V_1_state.read())) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_id_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_id_V_1_state.read())) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_dest_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_dest_V_1_state.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void axistream2axivideo::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_vld_out.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()))) || ((esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,2,2>(outStream_V_data_V_1_state.read(), ap_const_lv2_1) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
    esl_seteq<1,2,2>(outStream_V_data_V_1_state.read(), ap_const_lv2_3)) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_keep_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_keep_V_1_state.read())) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_strb_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_strb_V_1_state.read())) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_user_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_user_V_1_state.read())) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_last_V_1_state.read())) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_id_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_id_V_1_state.read())) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_dest_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_dest_V_1_state.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void axistream2axivideo::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_vld_out.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()))) || ((esl_seteq<1,1,1>(ap_const_logic_0, outStream_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,2,2>(outStream_V_data_V_1_state.read(), ap_const_lv2_1) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
    esl_seteq<1,2,2>(outStream_V_data_V_1_state.read(), ap_const_lv2_3)) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_keep_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_keep_V_1_state.read())) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_strb_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_strb_V_1_state.read())) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_user_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_user_V_1_state.read())) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_last_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_last_V_1_state.read())) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_id_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_id_V_1_state.read())) || 
   esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_dest_V_1_state.read()) || 
   (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
    esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_dest_V_1_state.read()))) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())));
}

void axistream2axivideo::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, inStream_V_data_V_0_vld_out.read()));
}

void axistream2axivideo::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = (esl_seteq<1,2,2>(outStream_V_data_V_1_state.read(), ap_const_lv2_1) || (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
  esl_seteq<1,2,2>(outStream_V_data_V_1_state.read(), ap_const_lv2_3)) || esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_keep_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_keep_V_1_state.read())) || esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_strb_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_strb_V_1_state.read())) || esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_user_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_user_V_1_state.read())) || esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_last_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_last_V_1_state.read())) || esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_id_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_id_V_1_state.read())) || esl_seteq<1,2,2>(ap_const_lv2_1, outStream_V_dest_V_1_state.read()) || (esl_seteq<1,1,1>(ap_const_logic_0, outStream_TREADY.read()) && 
  esl_seteq<1,2,2>(ap_const_lv2_3, outStream_V_dest_V_1_state.read())));
}

void axistream2axivideo::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void axistream2axivideo::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void axistream2axivideo::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void axistream2axivideo::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void axistream2axivideo::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void axistream2axivideo::thread_ap_idle_pp0_0to0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read())) {
        ap_idle_pp0_0to0 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to0 = ap_const_logic_0;
    }
}

void axistream2axivideo::thread_ap_phi_mux_pixels_V_new_1_phi_fu_134_p8() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln16_fu_235_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_fu_241_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_247_p2.read()))) {
        ap_phi_mux_pixels_V_new_1_phi_fu_134_p8 = ap_const_lv16_0;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln16_fu_235_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln16_fu_235_p2.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_fu_241_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln16_fu_235_p2.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_fu_241_p2.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_fu_247_p2.read())))) {
        ap_phi_mux_pixels_V_new_1_phi_fu_134_p8 = add_ln700_fu_194_p2.read();
    } else {
        ap_phi_mux_pixels_V_new_1_phi_fu_134_p8 = ap_phi_reg_pp0_iter0_pixels_V_new_1_reg_131.read();
    }
}

void axistream2axivideo::thread_ap_phi_mux_tmp_last_V_phi_fu_169_p8() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln16_fu_235_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_fu_241_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_247_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln16_fu_235_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_fu_241_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_fu_247_p2.read())))) {
        ap_phi_mux_tmp_last_V_phi_fu_169_p8 = ap_const_lv1_1;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln16_fu_235_p2.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln16_fu_235_p2.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_fu_241_p2.read())))) {
        ap_phi_mux_tmp_last_V_phi_fu_169_p8 = ap_const_lv1_0;
    } else {
        ap_phi_mux_tmp_last_V_phi_fu_169_p8 = ap_phi_reg_pp0_iter0_tmp_last_V_reg_165.read();
    }
}

void axistream2axivideo::thread_ap_phi_mux_tmp_user_V_phi_fu_149_p8() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln16_fu_235_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln887_fu_241_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln16_fu_235_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_fu_241_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_247_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln16_fu_235_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln887_fu_241_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_fu_247_p2.read())))) {
        ap_phi_mux_tmp_user_V_phi_fu_149_p8 = ap_const_lv1_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln16_fu_235_p2.read()))) {
        ap_phi_mux_tmp_user_V_phi_fu_149_p8 = ap_const_lv1_1;
    } else {
        ap_phi_mux_tmp_user_V_phi_fu_149_p8 = ap_phi_reg_pp0_iter0_tmp_user_V_reg_145.read();
    }
}

void axistream2axivideo::thread_ap_phi_reg_pp0_iter0_pixels_V_new_1_reg_131() {
    ap_phi_reg_pp0_iter0_pixels_V_new_1_reg_131 =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
}

void axistream2axivideo::thread_ap_phi_reg_pp0_iter0_tmp_last_V_reg_165() {
    ap_phi_reg_pp0_iter0_tmp_last_V_reg_165 = "X";
}

void axistream2axivideo::thread_ap_phi_reg_pp0_iter0_tmp_user_V_reg_145() {
    ap_phi_reg_pp0_iter0_tmp_user_V_reg_145 = "X";
}

void axistream2axivideo::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void axistream2axivideo::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to0.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void axistream2axivideo::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void axistream2axivideo::thread_icmp_ln16_fu_235_p2() {
    icmp_ln16_fu_235_p2 = (!or_ln_fu_227_p3.read().is_01() || !ap_const_lv16_0.is_01())? sc_lv<1>(): sc_lv<1>(or_ln_fu_227_p3.read() == ap_const_lv16_0);
}

void axistream2axivideo::thread_icmp_ln879_fu_247_p2() {
    icmp_ln879_fu_247_p2 = (!add_ln700_fu_194_p2.read().is_01() || !ap_const_lv16_280.is_01())? sc_lv<1>(): sc_lv<1>(add_ln700_fu_194_p2.read() == ap_const_lv16_280);
}

void axistream2axivideo::thread_icmp_ln887_fu_241_p2() {
    icmp_ln887_fu_241_p2 = (!add_ln700_fu_194_p2.read().is_01() || !ap_const_lv16_280.is_01())? sc_lv<1>(): (sc_biguint<16>(add_ln700_fu_194_p2.read()) < sc_biguint<16>(ap_const_lv16_280));
}

void axistream2axivideo::thread_icmp_ln891_fu_259_p2() {
    icmp_ln891_fu_259_p2 = (!add_ln700_1_fu_253_p2.read().is_01() || !ap_const_lv9_1DF.is_01())? sc_lv<1>(): (sc_biguint<9>(add_ln700_1_fu_253_p2.read()) > sc_biguint<9>(ap_const_lv9_1DF));
}

void axistream2axivideo::thread_inStream_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        inStream_TDATA_blk_n = inStream_V_data_V_0_state.read()[0];
    } else {
        inStream_TDATA_blk_n = ap_const_logic_1;
    }
}

void axistream2axivideo::thread_inStream_TREADY() {
    inStream_TREADY = inStream_V_dest_V_0_state.read()[1];
}

void axistream2axivideo::thread_inStream_V_data_V_0_ack_in() {
    inStream_V_data_V_0_ack_in = inStream_V_data_V_0_state.read()[1];
}

void axistream2axivideo::thread_inStream_V_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        inStream_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        inStream_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void axistream2axivideo::thread_inStream_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, inStream_V_data_V_0_sel.read())) {
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_B.read();
    } else {
        inStream_V_data_V_0_data_out = inStream_V_data_V_0_payload_A.read();
    }
}

void axistream2axivideo::thread_inStream_V_data_V_0_load_A() {
    inStream_V_data_V_0_load_A = (inStream_V_data_V_0_state_cmp_full.read() & ~inStream_V_data_V_0_sel_wr.read());
}

void axistream2axivideo::thread_inStream_V_data_V_0_load_B() {
    inStream_V_data_V_0_load_B = (inStream_V_data_V_0_sel_wr.read() & inStream_V_data_V_0_state_cmp_full.read());
}

void axistream2axivideo::thread_inStream_V_data_V_0_sel() {
    inStream_V_data_V_0_sel = inStream_V_data_V_0_sel_rd.read();
}

void axistream2axivideo::thread_inStream_V_data_V_0_state_cmp_full() {
    inStream_V_data_V_0_state_cmp_full =  (sc_logic) ((!inStream_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(inStream_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void axistream2axivideo::thread_inStream_V_data_V_0_vld_in() {
    inStream_V_data_V_0_vld_in = inStream_TVALID.read();
}

void axistream2axivideo::thread_inStream_V_data_V_0_vld_out() {
    inStream_V_data_V_0_vld_out = inStream_V_data_V_0_state.read()[0];
}

void axistream2axivideo::thread_inStream_V_dest_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        inStream_V_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        inStream_V_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void axistream2axivideo::thread_inStream_V_dest_V_0_vld_in() {
    inStream_V_dest_V_0_vld_in = inStream_TVALID.read();
}

void axistream2axivideo::thread_or_ln16_fu_211_p2() {
    or_ln16_fu_211_p2 = (trunc_ln16_fu_207_p1.read() | lines_V.read());
}

void axistream2axivideo::thread_or_ln_fu_227_p3() {
    or_ln_fu_227_p3 = esl_concat<7,9>(tmp_fu_217_p4.read(), or_ln16_fu_211_p2.read());
}

void axistream2axivideo::thread_outStream_TDATA() {
    outStream_TDATA = outStream_V_data_V_1_data_out.read();
}

void axistream2axivideo::thread_outStream_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)))) {
        outStream_TDATA_blk_n = outStream_V_data_V_1_state.read()[1];
    } else {
        outStream_TDATA_blk_n = ap_const_logic_1;
    }
}

void axistream2axivideo::thread_outStream_TDEST() {
    outStream_TDEST = outStream_V_dest_V_1_data_out.read();
}

void axistream2axivideo::thread_outStream_TID() {
    outStream_TID = outStream_V_id_V_1_data_out.read();
}

void axistream2axivideo::thread_outStream_TKEEP() {
    outStream_TKEEP = outStream_V_keep_V_1_data_out.read();
}

void axistream2axivideo::thread_outStream_TLAST() {
    outStream_TLAST = outStream_V_last_V_1_data_out.read();
}

void axistream2axivideo::thread_outStream_TSTRB() {
    outStream_TSTRB = outStream_V_strb_V_1_data_out.read();
}

void axistream2axivideo::thread_outStream_TUSER() {
    outStream_TUSER = outStream_V_user_V_1_data_out.read();
}

void axistream2axivideo::thread_outStream_TVALID() {
    outStream_TVALID = outStream_V_dest_V_1_state.read()[0];
}

void axistream2axivideo::thread_outStream_V_data_V_1_ack_in() {
    outStream_V_data_V_1_ack_in = outStream_V_data_V_1_state.read()[1];
}

void axistream2axivideo::thread_outStream_V_data_V_1_ack_out() {
    outStream_V_data_V_1_ack_out = outStream_TREADY.read();
}

void axistream2axivideo::thread_outStream_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_data_V_1_sel.read())) {
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_B.read();
    } else {
        outStream_V_data_V_1_data_out = outStream_V_data_V_1_payload_A.read();
    }
}

void axistream2axivideo::thread_outStream_V_data_V_1_load_A() {
    outStream_V_data_V_1_load_A = (outStream_V_data_V_1_state_cmp_full.read() & ~outStream_V_data_V_1_sel_wr.read());
}

void axistream2axivideo::thread_outStream_V_data_V_1_load_B() {
    outStream_V_data_V_1_load_B = (outStream_V_data_V_1_sel_wr.read() & outStream_V_data_V_1_state_cmp_full.read());
}

void axistream2axivideo::thread_outStream_V_data_V_1_sel() {
    outStream_V_data_V_1_sel = outStream_V_data_V_1_sel_rd.read();
}

void axistream2axivideo::thread_outStream_V_data_V_1_state_cmp_full() {
    outStream_V_data_V_1_state_cmp_full =  (sc_logic) ((!outStream_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void axistream2axivideo::thread_outStream_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        outStream_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void axistream2axivideo::thread_outStream_V_data_V_1_vld_out() {
    outStream_V_data_V_1_vld_out = outStream_V_data_V_1_state.read()[0];
}

void axistream2axivideo::thread_outStream_V_dest_V_1_ack_out() {
    outStream_V_dest_V_1_ack_out = outStream_TREADY.read();
}

void axistream2axivideo::thread_outStream_V_dest_V_1_data_out() {
    outStream_V_dest_V_1_data_out = ap_const_lv1_0;
}

void axistream2axivideo::thread_outStream_V_dest_V_1_sel() {
    outStream_V_dest_V_1_sel = outStream_V_dest_V_1_sel_rd.read();
}

void axistream2axivideo::thread_outStream_V_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        outStream_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void axistream2axivideo::thread_outStream_V_dest_V_1_vld_out() {
    outStream_V_dest_V_1_vld_out = outStream_V_dest_V_1_state.read()[0];
}

void axistream2axivideo::thread_outStream_V_id_V_1_ack_out() {
    outStream_V_id_V_1_ack_out = outStream_TREADY.read();
}

void axistream2axivideo::thread_outStream_V_id_V_1_data_out() {
    outStream_V_id_V_1_data_out = ap_const_lv1_0;
}

void axistream2axivideo::thread_outStream_V_id_V_1_sel() {
    outStream_V_id_V_1_sel = outStream_V_id_V_1_sel_rd.read();
}

void axistream2axivideo::thread_outStream_V_id_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        outStream_V_id_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_id_V_1_vld_in = ap_const_logic_0;
    }
}

void axistream2axivideo::thread_outStream_V_id_V_1_vld_out() {
    outStream_V_id_V_1_vld_out = outStream_V_id_V_1_state.read()[0];
}

void axistream2axivideo::thread_outStream_V_keep_V_1_ack_out() {
    outStream_V_keep_V_1_ack_out = outStream_TREADY.read();
}

void axistream2axivideo::thread_outStream_V_keep_V_1_data_out() {
    outStream_V_keep_V_1_data_out = ap_const_lv1_0;
}

void axistream2axivideo::thread_outStream_V_keep_V_1_sel() {
    outStream_V_keep_V_1_sel = outStream_V_keep_V_1_sel_rd.read();
}

void axistream2axivideo::thread_outStream_V_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        outStream_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void axistream2axivideo::thread_outStream_V_keep_V_1_vld_out() {
    outStream_V_keep_V_1_vld_out = outStream_V_keep_V_1_state.read()[0];
}

void axistream2axivideo::thread_outStream_V_last_V_1_ack_in() {
    outStream_V_last_V_1_ack_in = outStream_V_last_V_1_state.read()[1];
}

void axistream2axivideo::thread_outStream_V_last_V_1_ack_out() {
    outStream_V_last_V_1_ack_out = outStream_TREADY.read();
}

void axistream2axivideo::thread_outStream_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_last_V_1_sel.read())) {
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_B.read();
    } else {
        outStream_V_last_V_1_data_out = outStream_V_last_V_1_payload_A.read();
    }
}

void axistream2axivideo::thread_outStream_V_last_V_1_load_A() {
    outStream_V_last_V_1_load_A = (outStream_V_last_V_1_state_cmp_full.read() & ~outStream_V_last_V_1_sel_wr.read());
}

void axistream2axivideo::thread_outStream_V_last_V_1_load_B() {
    outStream_V_last_V_1_load_B = (outStream_V_last_V_1_sel_wr.read() & outStream_V_last_V_1_state_cmp_full.read());
}

void axistream2axivideo::thread_outStream_V_last_V_1_sel() {
    outStream_V_last_V_1_sel = outStream_V_last_V_1_sel_rd.read();
}

void axistream2axivideo::thread_outStream_V_last_V_1_state_cmp_full() {
    outStream_V_last_V_1_state_cmp_full =  (sc_logic) ((!outStream_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void axistream2axivideo::thread_outStream_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        outStream_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void axistream2axivideo::thread_outStream_V_last_V_1_vld_out() {
    outStream_V_last_V_1_vld_out = outStream_V_last_V_1_state.read()[0];
}

void axistream2axivideo::thread_outStream_V_strb_V_1_ack_out() {
    outStream_V_strb_V_1_ack_out = outStream_TREADY.read();
}

void axistream2axivideo::thread_outStream_V_strb_V_1_data_out() {
    outStream_V_strb_V_1_data_out = ap_const_lv1_0;
}

void axistream2axivideo::thread_outStream_V_strb_V_1_sel() {
    outStream_V_strb_V_1_sel = outStream_V_strb_V_1_sel_rd.read();
}

void axistream2axivideo::thread_outStream_V_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        outStream_V_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void axistream2axivideo::thread_outStream_V_strb_V_1_vld_out() {
    outStream_V_strb_V_1_vld_out = outStream_V_strb_V_1_state.read()[0];
}

void axistream2axivideo::thread_outStream_V_user_V_1_ack_in() {
    outStream_V_user_V_1_ack_in = outStream_V_user_V_1_state.read()[1];
}

void axistream2axivideo::thread_outStream_V_user_V_1_ack_out() {
    outStream_V_user_V_1_ack_out = outStream_TREADY.read();
}

void axistream2axivideo::thread_outStream_V_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, outStream_V_user_V_1_sel.read())) {
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_B.read();
    } else {
        outStream_V_user_V_1_data_out = outStream_V_user_V_1_payload_A.read();
    }
}

void axistream2axivideo::thread_outStream_V_user_V_1_load_A() {
    outStream_V_user_V_1_load_A = (outStream_V_user_V_1_state_cmp_full.read() & ~outStream_V_user_V_1_sel_wr.read());
}

void axistream2axivideo::thread_outStream_V_user_V_1_load_B() {
    outStream_V_user_V_1_load_B = (outStream_V_user_V_1_sel_wr.read() & outStream_V_user_V_1_state_cmp_full.read());
}

void axistream2axivideo::thread_outStream_V_user_V_1_sel() {
    outStream_V_user_V_1_sel = outStream_V_user_V_1_sel_rd.read();
}

void axistream2axivideo::thread_outStream_V_user_V_1_state_cmp_full() {
    outStream_V_user_V_1_state_cmp_full =  (sc_logic) ((!outStream_V_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(outStream_V_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void axistream2axivideo::thread_outStream_V_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        outStream_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        outStream_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void axistream2axivideo::thread_outStream_V_user_V_1_vld_out() {
    outStream_V_user_V_1_vld_out = outStream_V_user_V_1_state.read()[0];
}

void axistream2axivideo::thread_select_ln28_fu_265_p3() {
    select_ln28_fu_265_p3 = (!icmp_ln891_fu_259_p2.read()[0].is_01())? sc_lv<9>(): ((icmp_ln891_fu_259_p2.read()[0].to_bool())? ap_const_lv9_0: add_ln700_1_fu_253_p2.read());
}

void axistream2axivideo::thread_tmp_fu_217_p4() {
    tmp_fu_217_p4 = pixels_V.read().range(15, 9);
}

void axistream2axivideo::thread_trunc_ln16_fu_207_p1() {
    trunc_ln16_fu_207_p1 = pixels_V.read().range(9-1, 0);
}

void axistream2axivideo::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void axistream2axivideo::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"outStream_TREADY\" :  \"" << outStream_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TDATA\" :  \"" << inStream_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TVALID\" :  \"" << inStream_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"inStream_TREADY\" :  \"" << inStream_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TKEEP\" :  \"" << inStream_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TSTRB\" :  \"" << inStream_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TUSER\" :  \"" << inStream_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TLAST\" :  \"" << inStream_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TID\" :  \"" << inStream_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inStream_TDEST\" :  \"" << inStream_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TDATA\" :  \"" << outStream_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TVALID\" :  \"" << outStream_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TKEEP\" :  \"" << outStream_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TSTRB\" :  \"" << outStream_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TUSER\" :  \"" << outStream_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TLAST\" :  \"" << outStream_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TID\" :  \"" << outStream_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"outStream_TDEST\" :  \"" << outStream_TDEST.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

