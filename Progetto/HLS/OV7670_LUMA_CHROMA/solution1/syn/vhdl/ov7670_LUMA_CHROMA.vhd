-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ov7670_LUMA_CHROMA is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inStream_V_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    inStream_V_V_TVALID : IN STD_LOGIC;
    inStream_V_V_TREADY : OUT STD_LOGIC;
    outStream_grayscale_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_grayscale_V_V_TVALID : OUT STD_LOGIC;
    outStream_grayscale_V_V_TREADY : IN STD_LOGIC;
    enable_raw_stream : IN STD_LOGIC;
    outStream_LUMA_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_LUMA_V_V_TVALID : OUT STD_LOGIC;
    outStream_LUMA_V_V_TREADY : IN STD_LOGIC;
    outStream_CHROMA_V_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    outStream_CHROMA_V_V_TVALID : OUT STD_LOGIC;
    outStream_CHROMA_V_V_TREADY : IN STD_LOGIC );
end;


architecture behav of ov7670_LUMA_CHROMA is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ov7670_LUMA_CHROMA,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=25.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.978000,HLS_SYN_LAT=2,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=94,HLS_SYN_LUT=225,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal inStream_V_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_V_0_vld_in : STD_LOGIC;
    signal inStream_V_V_0_vld_out : STD_LOGIC;
    signal inStream_V_V_0_ack_in : STD_LOGIC;
    signal inStream_V_V_0_ack_out : STD_LOGIC;
    signal inStream_V_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal inStream_V_V_0_sel_rd : STD_LOGIC := '0';
    signal inStream_V_V_0_sel_wr : STD_LOGIC := '0';
    signal inStream_V_V_0_sel : STD_LOGIC;
    signal inStream_V_V_0_load_A : STD_LOGIC;
    signal inStream_V_V_0_load_B : STD_LOGIC;
    signal inStream_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal inStream_V_V_0_state_cmp_full : STD_LOGIC;
    signal outStream_grayscale_V_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_grayscale_V_V_1_vld_in : STD_LOGIC;
    signal outStream_grayscale_V_V_1_vld_out : STD_LOGIC;
    signal outStream_grayscale_V_V_1_ack_in : STD_LOGIC;
    signal outStream_grayscale_V_V_1_ack_out : STD_LOGIC;
    signal outStream_grayscale_V_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_grayscale_V_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_grayscale_V_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_grayscale_V_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_grayscale_V_V_1_sel : STD_LOGIC;
    signal outStream_grayscale_V_V_1_load_A : STD_LOGIC;
    signal outStream_grayscale_V_V_1_load_B : STD_LOGIC;
    signal outStream_grayscale_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_grayscale_V_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_LUMA_V_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_LUMA_V_V_1_vld_in : STD_LOGIC;
    signal outStream_LUMA_V_V_1_vld_out : STD_LOGIC;
    signal outStream_LUMA_V_V_1_ack_in : STD_LOGIC;
    signal outStream_LUMA_V_V_1_ack_out : STD_LOGIC;
    signal outStream_LUMA_V_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_LUMA_V_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_LUMA_V_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_LUMA_V_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_LUMA_V_V_1_sel : STD_LOGIC;
    signal outStream_LUMA_V_V_1_load_A : STD_LOGIC;
    signal outStream_LUMA_V_V_1_load_B : STD_LOGIC;
    signal outStream_LUMA_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_LUMA_V_V_1_state_cmp_full : STD_LOGIC;
    signal outStream_CHROMA_V_V_1_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_CHROMA_V_V_1_vld_in : STD_LOGIC;
    signal outStream_CHROMA_V_V_1_vld_out : STD_LOGIC;
    signal outStream_CHROMA_V_V_1_ack_in : STD_LOGIC;
    signal outStream_CHROMA_V_V_1_ack_out : STD_LOGIC;
    signal outStream_CHROMA_V_V_1_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_CHROMA_V_V_1_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal outStream_CHROMA_V_V_1_sel_rd : STD_LOGIC := '0';
    signal outStream_CHROMA_V_V_1_sel_wr : STD_LOGIC := '0';
    signal outStream_CHROMA_V_V_1_sel : STD_LOGIC;
    signal outStream_CHROMA_V_V_1_load_A : STD_LOGIC;
    signal outStream_CHROMA_V_V_1_load_B : STD_LOGIC;
    signal outStream_CHROMA_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal outStream_CHROMA_V_V_1_state_cmp_full : STD_LOGIC;
    signal grayscale_valid : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal inStream_V_V_TDATA_blk_n : STD_LOGIC;
    signal outStream_grayscale_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal outStream_LUMA_V_V_TDATA_blk_n : STD_LOGIC;
    signal enable_raw_stream_re_read_fu_42_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grayscale_valid_load_reg_103 : STD_LOGIC_VECTOR (0 downto 0);
    signal outStream_CHROMA_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal ap_predicate_op22_write_state1 : BOOLEAN;
    signal ap_block_state1_io : BOOLEAN;
    signal tmp_V_reg_96 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln30_fu_81_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4 : BOOLEAN;
    signal ap_predicate_op30_write_state4 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state2_io : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grayscale_valid_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grayscale_valid <= ap_const_lv1_0;
            else
                if ((not(((outStream_CHROMA_V_V_1_state = ap_const_lv2_1) or (outStream_LUMA_V_V_1_state = ap_const_lv2_1) or (outStream_grayscale_V_V_1_state = ap_const_lv2_1) or (ap_const_boolean_1 = ap_block_state4_io) or ((outStream_CHROMA_V_V_1_state = ap_const_lv2_3) and (outStream_CHROMA_V_V_TREADY = ap_const_logic_0)) or ((outStream_LUMA_V_V_1_state = ap_const_lv2_3) and (outStream_LUMA_V_V_TREADY = ap_const_logic_0)) or ((outStream_grayscale_V_V_1_state = ap_const_lv2_3) and (outStream_grayscale_V_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    grayscale_valid <= xor_ln30_fu_81_p2;
                end if; 
            end if;
        end if;
    end process;


    inStream_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((inStream_V_V_0_ack_out = ap_const_logic_1) and (inStream_V_V_0_vld_out = ap_const_logic_1))) then 
                                        inStream_V_V_0_sel_rd <= not(inStream_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((inStream_V_V_0_ack_in = ap_const_logic_1) and (inStream_V_V_0_vld_in = ap_const_logic_1))) then 
                                        inStream_V_V_0_sel_wr <= not(inStream_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    inStream_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                inStream_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((inStream_V_V_0_state = ap_const_lv2_2) and (inStream_V_V_0_vld_in = ap_const_logic_0)) or ((inStream_V_V_0_state = ap_const_lv2_3) and (inStream_V_V_0_vld_in = ap_const_logic_0) and (inStream_V_V_0_ack_out = ap_const_logic_1)))) then 
                    inStream_V_V_0_state <= ap_const_lv2_2;
                elsif ((((inStream_V_V_0_state = ap_const_lv2_1) and (inStream_V_V_0_ack_out = ap_const_logic_0)) or ((inStream_V_V_0_state = ap_const_lv2_3) and (inStream_V_V_0_ack_out = ap_const_logic_0) and (inStream_V_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((inStream_V_V_0_vld_in = ap_const_logic_0) and (inStream_V_V_0_ack_out = ap_const_logic_1))) and not(((inStream_V_V_0_ack_out = ap_const_logic_0) and (inStream_V_V_0_vld_in = ap_const_logic_1))) and (inStream_V_V_0_state = ap_const_lv2_3)) or ((inStream_V_V_0_state = ap_const_lv2_1) and (inStream_V_V_0_ack_out = ap_const_logic_1)) or ((inStream_V_V_0_state = ap_const_lv2_2) and (inStream_V_V_0_vld_in = ap_const_logic_1)))) then 
                    inStream_V_V_0_state <= ap_const_lv2_3;
                else 
                    inStream_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_CHROMA_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_CHROMA_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_CHROMA_V_V_1_ack_out = ap_const_logic_1) and (outStream_CHROMA_V_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_CHROMA_V_V_1_sel_rd <= not(outStream_CHROMA_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_CHROMA_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_CHROMA_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_CHROMA_V_V_1_ack_in = ap_const_logic_1) and (outStream_CHROMA_V_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_CHROMA_V_V_1_sel_wr <= not(outStream_CHROMA_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_CHROMA_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_CHROMA_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_CHROMA_V_V_1_state = ap_const_lv2_2) and (outStream_CHROMA_V_V_1_vld_in = ap_const_logic_0)) or ((outStream_CHROMA_V_V_1_state = ap_const_lv2_3) and (outStream_CHROMA_V_V_1_vld_in = ap_const_logic_0) and (outStream_CHROMA_V_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_CHROMA_V_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_CHROMA_V_V_1_state = ap_const_lv2_1) and (outStream_CHROMA_V_V_TREADY = ap_const_logic_0)) or ((outStream_CHROMA_V_V_1_state = ap_const_lv2_3) and (outStream_CHROMA_V_V_TREADY = ap_const_logic_0) and (outStream_CHROMA_V_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_CHROMA_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_CHROMA_V_V_1_vld_in = ap_const_logic_0) and (outStream_CHROMA_V_V_1_ack_out = ap_const_logic_1))) and not(((outStream_CHROMA_V_V_TREADY = ap_const_logic_0) and (outStream_CHROMA_V_V_1_vld_in = ap_const_logic_1))) and (outStream_CHROMA_V_V_1_state = ap_const_lv2_3)) or ((outStream_CHROMA_V_V_1_state = ap_const_lv2_1) and (outStream_CHROMA_V_V_1_ack_out = ap_const_logic_1)) or ((outStream_CHROMA_V_V_1_state = ap_const_lv2_2) and (outStream_CHROMA_V_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_CHROMA_V_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_CHROMA_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_LUMA_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_LUMA_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_LUMA_V_V_1_ack_out = ap_const_logic_1) and (outStream_LUMA_V_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_LUMA_V_V_1_sel_rd <= not(outStream_LUMA_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_LUMA_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_LUMA_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_LUMA_V_V_1_ack_in = ap_const_logic_1) and (outStream_LUMA_V_V_1_vld_in = ap_const_logic_1))) then 
                                        outStream_LUMA_V_V_1_sel_wr <= not(outStream_LUMA_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_LUMA_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_LUMA_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_LUMA_V_V_1_state = ap_const_lv2_2) and (outStream_LUMA_V_V_1_vld_in = ap_const_logic_0)) or ((outStream_LUMA_V_V_1_state = ap_const_lv2_3) and (outStream_LUMA_V_V_1_vld_in = ap_const_logic_0) and (outStream_LUMA_V_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_LUMA_V_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_LUMA_V_V_1_state = ap_const_lv2_1) and (outStream_LUMA_V_V_TREADY = ap_const_logic_0)) or ((outStream_LUMA_V_V_1_state = ap_const_lv2_3) and (outStream_LUMA_V_V_TREADY = ap_const_logic_0) and (outStream_LUMA_V_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_LUMA_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_LUMA_V_V_1_vld_in = ap_const_logic_0) and (outStream_LUMA_V_V_1_ack_out = ap_const_logic_1))) and not(((outStream_LUMA_V_V_TREADY = ap_const_logic_0) and (outStream_LUMA_V_V_1_vld_in = ap_const_logic_1))) and (outStream_LUMA_V_V_1_state = ap_const_lv2_3)) or ((outStream_LUMA_V_V_1_state = ap_const_lv2_1) and (outStream_LUMA_V_V_1_ack_out = ap_const_logic_1)) or ((outStream_LUMA_V_V_1_state = ap_const_lv2_2) and (outStream_LUMA_V_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_LUMA_V_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_LUMA_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    outStream_grayscale_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_grayscale_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((outStream_grayscale_V_V_1_ack_out = ap_const_logic_1) and (outStream_grayscale_V_V_1_vld_out = ap_const_logic_1))) then 
                                        outStream_grayscale_V_V_1_sel_rd <= not(outStream_grayscale_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    outStream_grayscale_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_grayscale_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((outStream_grayscale_V_V_1_vld_in = ap_const_logic_1) and (outStream_grayscale_V_V_1_ack_in = ap_const_logic_1))) then 
                                        outStream_grayscale_V_V_1_sel_wr <= not(outStream_grayscale_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    outStream_grayscale_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                outStream_grayscale_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((outStream_grayscale_V_V_1_state = ap_const_lv2_2) and (outStream_grayscale_V_V_1_vld_in = ap_const_logic_0)) or ((outStream_grayscale_V_V_1_state = ap_const_lv2_3) and (outStream_grayscale_V_V_1_vld_in = ap_const_logic_0) and (outStream_grayscale_V_V_1_ack_out = ap_const_logic_1)))) then 
                    outStream_grayscale_V_V_1_state <= ap_const_lv2_2;
                elsif ((((outStream_grayscale_V_V_1_state = ap_const_lv2_1) and (outStream_grayscale_V_V_TREADY = ap_const_logic_0)) or ((outStream_grayscale_V_V_1_state = ap_const_lv2_3) and (outStream_grayscale_V_V_TREADY = ap_const_logic_0) and (outStream_grayscale_V_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_grayscale_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((outStream_grayscale_V_V_1_vld_in = ap_const_logic_0) and (outStream_grayscale_V_V_1_ack_out = ap_const_logic_1))) and not(((outStream_grayscale_V_V_TREADY = ap_const_logic_0) and (outStream_grayscale_V_V_1_vld_in = ap_const_logic_1))) and (outStream_grayscale_V_V_1_state = ap_const_lv2_3)) or ((outStream_grayscale_V_V_1_state = ap_const_lv2_1) and (outStream_grayscale_V_V_1_ack_out = ap_const_logic_1)) or ((outStream_grayscale_V_V_1_state = ap_const_lv2_2) and (outStream_grayscale_V_V_1_vld_in = ap_const_logic_1)))) then 
                    outStream_grayscale_V_V_1_state <= ap_const_lv2_3;
                else 
                    outStream_grayscale_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((inStream_V_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                grayscale_valid_load_reg_103 <= grayscale_valid;
                tmp_V_reg_96 <= inStream_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_V_0_load_A = ap_const_logic_1)) then
                inStream_V_V_0_payload_A <= inStream_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((inStream_V_V_0_load_B = ap_const_logic_1)) then
                inStream_V_V_0_payload_B <= inStream_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_CHROMA_V_V_1_load_A = ap_const_logic_1)) then
                outStream_CHROMA_V_V_1_payload_A <= inStream_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_CHROMA_V_V_1_load_B = ap_const_logic_1)) then
                outStream_CHROMA_V_V_1_payload_B <= inStream_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_LUMA_V_V_1_load_A = ap_const_logic_1)) then
                outStream_LUMA_V_V_1_payload_A <= tmp_V_reg_96;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_LUMA_V_V_1_load_B = ap_const_logic_1)) then
                outStream_LUMA_V_V_1_payload_B <= tmp_V_reg_96;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_grayscale_V_V_1_load_A = ap_const_logic_1)) then
                outStream_grayscale_V_V_1_payload_A <= inStream_V_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((outStream_grayscale_V_V_1_load_B = ap_const_logic_1)) then
                outStream_grayscale_V_V_1_payload_B <= inStream_V_V_0_data_out;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, inStream_V_V_0_vld_out, outStream_grayscale_V_V_TREADY, outStream_grayscale_V_V_1_state, outStream_LUMA_V_V_TREADY, outStream_LUMA_V_V_1_state, outStream_CHROMA_V_V_TREADY, outStream_CHROMA_V_V_1_state, grayscale_valid, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_block_state1_io, ap_block_state4_io, ap_block_state3_io, ap_block_state2_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((inStream_V_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (grayscale_valid = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((inStream_V_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (grayscale_valid = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_io) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((outStream_CHROMA_V_V_1_state = ap_const_lv2_1) or (outStream_LUMA_V_V_1_state = ap_const_lv2_1) or (outStream_grayscale_V_V_1_state = ap_const_lv2_1) or (ap_const_boolean_1 = ap_block_state4_io) or ((outStream_CHROMA_V_V_1_state = ap_const_lv2_3) and (outStream_CHROMA_V_V_TREADY = ap_const_logic_0)) or ((outStream_LUMA_V_V_1_state = ap_const_lv2_3) and (outStream_LUMA_V_V_TREADY = ap_const_logic_0)) or ((outStream_grayscale_V_V_1_state = ap_const_lv2_3) and (outStream_grayscale_V_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(ap_start, inStream_V_V_0_vld_out)
    begin
                ap_block_state1 <= ((inStream_V_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state1_io_assign_proc : process(outStream_grayscale_V_V_1_ack_in, outStream_CHROMA_V_V_1_ack_in, grayscale_valid, ap_predicate_op22_write_state1)
    begin
                ap_block_state1_io <= (((outStream_CHROMA_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op22_write_state1 = ap_const_boolean_1)) or ((grayscale_valid = ap_const_lv1_1) and (outStream_grayscale_V_V_1_ack_in = ap_const_logic_0)));
    end process;


    ap_block_state2_io_assign_proc : process(outStream_CHROMA_V_V_1_ack_in, enable_raw_stream_re_read_fu_42_p2)
    begin
                ap_block_state2_io <= ((enable_raw_stream_re_read_fu_42_p2 = ap_const_lv1_1) and (outStream_CHROMA_V_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state3_io_assign_proc : process(outStream_grayscale_V_V_1_ack_in, outStream_LUMA_V_V_1_ack_in, enable_raw_stream_re_read_fu_42_p2)
    begin
                ap_block_state3_io <= ((outStream_grayscale_V_V_1_ack_in = ap_const_logic_0) or ((enable_raw_stream_re_read_fu_42_p2 = ap_const_lv1_1) and (outStream_LUMA_V_V_1_ack_in = ap_const_logic_0)));
    end process;


    ap_block_state4_assign_proc : process(outStream_grayscale_V_V_TREADY, outStream_grayscale_V_V_1_state, outStream_LUMA_V_V_TREADY, outStream_LUMA_V_V_1_state, outStream_CHROMA_V_V_TREADY, outStream_CHROMA_V_V_1_state)
    begin
                ap_block_state4 <= ((outStream_CHROMA_V_V_1_state = ap_const_lv2_1) or (outStream_LUMA_V_V_1_state = ap_const_lv2_1) or (outStream_grayscale_V_V_1_state = ap_const_lv2_1) or ((outStream_CHROMA_V_V_1_state = ap_const_lv2_3) and (outStream_CHROMA_V_V_TREADY = ap_const_logic_0)) or ((outStream_LUMA_V_V_1_state = ap_const_lv2_3) and (outStream_LUMA_V_V_TREADY = ap_const_logic_0)) or ((outStream_grayscale_V_V_1_state = ap_const_lv2_3) and (outStream_grayscale_V_V_TREADY = ap_const_logic_0)));
    end process;


    ap_block_state4_io_assign_proc : process(outStream_LUMA_V_V_1_ack_in, ap_predicate_op30_write_state4)
    begin
                ap_block_state4_io <= ((outStream_LUMA_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op30_write_state4 = ap_const_boolean_1));
    end process;


    ap_done_assign_proc : process(outStream_grayscale_V_V_TREADY, outStream_grayscale_V_V_1_state, outStream_LUMA_V_V_TREADY, outStream_LUMA_V_V_1_state, outStream_CHROMA_V_V_TREADY, outStream_CHROMA_V_V_1_state, ap_CS_fsm_state4, ap_block_state4_io)
    begin
        if ((not(((outStream_CHROMA_V_V_1_state = ap_const_lv2_1) or (outStream_LUMA_V_V_1_state = ap_const_lv2_1) or (outStream_grayscale_V_V_1_state = ap_const_lv2_1) or (ap_const_boolean_1 = ap_block_state4_io) or ((outStream_CHROMA_V_V_1_state = ap_const_lv2_3) and (outStream_CHROMA_V_V_TREADY = ap_const_logic_0)) or ((outStream_LUMA_V_V_1_state = ap_const_lv2_3) and (outStream_LUMA_V_V_TREADY = ap_const_logic_0)) or ((outStream_grayscale_V_V_1_state = ap_const_lv2_3) and (outStream_grayscale_V_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op22_write_state1_assign_proc : process(grayscale_valid, enable_raw_stream_re_read_fu_42_p2)
    begin
                ap_predicate_op22_write_state1 <= ((enable_raw_stream_re_read_fu_42_p2 = ap_const_lv1_1) and (grayscale_valid = ap_const_lv1_0));
    end process;


    ap_predicate_op30_write_state4_assign_proc : process(enable_raw_stream_re_read_fu_42_p2, grayscale_valid_load_reg_103)
    begin
                ap_predicate_op30_write_state4 <= ((grayscale_valid_load_reg_103 = ap_const_lv1_1) and (enable_raw_stream_re_read_fu_42_p2 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(outStream_grayscale_V_V_TREADY, outStream_grayscale_V_V_1_state, outStream_LUMA_V_V_TREADY, outStream_LUMA_V_V_1_state, outStream_CHROMA_V_V_TREADY, outStream_CHROMA_V_V_1_state, ap_CS_fsm_state4, ap_block_state4_io)
    begin
        if ((not(((outStream_CHROMA_V_V_1_state = ap_const_lv2_1) or (outStream_LUMA_V_V_1_state = ap_const_lv2_1) or (outStream_grayscale_V_V_1_state = ap_const_lv2_1) or (ap_const_boolean_1 = ap_block_state4_io) or ((outStream_CHROMA_V_V_1_state = ap_const_lv2_3) and (outStream_CHROMA_V_V_TREADY = ap_const_logic_0)) or ((outStream_LUMA_V_V_1_state = ap_const_lv2_3) and (outStream_LUMA_V_V_TREADY = ap_const_logic_0)) or ((outStream_grayscale_V_V_1_state = ap_const_lv2_3) and (outStream_grayscale_V_V_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    enable_raw_stream_re_read_fu_42_p2 <= (0=>enable_raw_stream, others=>'-');
    inStream_V_V_0_ack_in <= inStream_V_V_0_state(1);

    inStream_V_V_0_ack_out_assign_proc : process(ap_start, ap_CS_fsm_state1, inStream_V_V_0_vld_out, ap_block_state1_io)
    begin
        if ((not(((inStream_V_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            inStream_V_V_0_ack_out <= ap_const_logic_1;
        else 
            inStream_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    inStream_V_V_0_data_out_assign_proc : process(inStream_V_V_0_payload_A, inStream_V_V_0_payload_B, inStream_V_V_0_sel)
    begin
        if ((inStream_V_V_0_sel = ap_const_logic_1)) then 
            inStream_V_V_0_data_out <= inStream_V_V_0_payload_B;
        else 
            inStream_V_V_0_data_out <= inStream_V_V_0_payload_A;
        end if; 
    end process;

    inStream_V_V_0_load_A <= (inStream_V_V_0_state_cmp_full and not(inStream_V_V_0_sel_wr));
    inStream_V_V_0_load_B <= (inStream_V_V_0_state_cmp_full and inStream_V_V_0_sel_wr);
    inStream_V_V_0_sel <= inStream_V_V_0_sel_rd;
    inStream_V_V_0_state_cmp_full <= '0' when (inStream_V_V_0_state = ap_const_lv2_1) else '1';
    inStream_V_V_0_vld_in <= inStream_V_V_TVALID;
    inStream_V_V_0_vld_out <= inStream_V_V_0_state(0);

    inStream_V_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, inStream_V_V_0_state)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            inStream_V_V_TDATA_blk_n <= inStream_V_V_0_state(0);
        else 
            inStream_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    inStream_V_V_TREADY <= inStream_V_V_0_state(1);
    outStream_CHROMA_V_V_1_ack_in <= outStream_CHROMA_V_V_1_state(1);
    outStream_CHROMA_V_V_1_ack_out <= outStream_CHROMA_V_V_TREADY;

    outStream_CHROMA_V_V_1_data_out_assign_proc : process(outStream_CHROMA_V_V_1_payload_A, outStream_CHROMA_V_V_1_payload_B, outStream_CHROMA_V_V_1_sel)
    begin
        if ((outStream_CHROMA_V_V_1_sel = ap_const_logic_1)) then 
            outStream_CHROMA_V_V_1_data_out <= outStream_CHROMA_V_V_1_payload_B;
        else 
            outStream_CHROMA_V_V_1_data_out <= outStream_CHROMA_V_V_1_payload_A;
        end if; 
    end process;

    outStream_CHROMA_V_V_1_load_A <= (outStream_CHROMA_V_V_1_state_cmp_full and not(outStream_CHROMA_V_V_1_sel_wr));
    outStream_CHROMA_V_V_1_load_B <= (outStream_CHROMA_V_V_1_state_cmp_full and outStream_CHROMA_V_V_1_sel_wr);
    outStream_CHROMA_V_V_1_sel <= outStream_CHROMA_V_V_1_sel_rd;
    outStream_CHROMA_V_V_1_state_cmp_full <= '0' when (outStream_CHROMA_V_V_1_state = ap_const_lv2_1) else '1';

    outStream_CHROMA_V_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, inStream_V_V_0_vld_out, ap_predicate_op22_write_state1, ap_block_state1_io)
    begin
        if ((not(((inStream_V_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (ap_predicate_op22_write_state1 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            outStream_CHROMA_V_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_CHROMA_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_CHROMA_V_V_1_vld_out <= outStream_CHROMA_V_V_1_state(0);
    outStream_CHROMA_V_V_TDATA <= outStream_CHROMA_V_V_1_data_out;

    outStream_CHROMA_V_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, outStream_CHROMA_V_V_1_state, grayscale_valid, enable_raw_stream_re_read_fu_42_p2, ap_CS_fsm_state2)
    begin
        if ((((enable_raw_stream_re_read_fu_42_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((enable_raw_stream_re_read_fu_42_p2 = ap_const_lv1_1) and (grayscale_valid = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            outStream_CHROMA_V_V_TDATA_blk_n <= outStream_CHROMA_V_V_1_state(1);
        else 
            outStream_CHROMA_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_CHROMA_V_V_TVALID <= outStream_CHROMA_V_V_1_state(0);
    outStream_LUMA_V_V_1_ack_in <= outStream_LUMA_V_V_1_state(1);
    outStream_LUMA_V_V_1_ack_out <= outStream_LUMA_V_V_TREADY;

    outStream_LUMA_V_V_1_data_out_assign_proc : process(outStream_LUMA_V_V_1_payload_A, outStream_LUMA_V_V_1_payload_B, outStream_LUMA_V_V_1_sel)
    begin
        if ((outStream_LUMA_V_V_1_sel = ap_const_logic_1)) then 
            outStream_LUMA_V_V_1_data_out <= outStream_LUMA_V_V_1_payload_B;
        else 
            outStream_LUMA_V_V_1_data_out <= outStream_LUMA_V_V_1_payload_A;
        end if; 
    end process;

    outStream_LUMA_V_V_1_load_A <= (outStream_LUMA_V_V_1_state_cmp_full and not(outStream_LUMA_V_V_1_sel_wr));
    outStream_LUMA_V_V_1_load_B <= (outStream_LUMA_V_V_1_state_cmp_full and outStream_LUMA_V_V_1_sel_wr);
    outStream_LUMA_V_V_1_sel <= outStream_LUMA_V_V_1_sel_rd;
    outStream_LUMA_V_V_1_state_cmp_full <= '0' when (outStream_LUMA_V_V_1_state = ap_const_lv2_1) else '1';

    outStream_LUMA_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_state3, enable_raw_stream_re_read_fu_42_p2, ap_block_state3_io)
    begin
        if (((enable_raw_stream_re_read_fu_42_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            outStream_LUMA_V_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_LUMA_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_LUMA_V_V_1_vld_out <= outStream_LUMA_V_V_1_state(0);
    outStream_LUMA_V_V_TDATA <= outStream_LUMA_V_V_1_data_out;

    outStream_LUMA_V_V_TDATA_blk_n_assign_proc : process(outStream_LUMA_V_V_1_state, ap_CS_fsm_state3, enable_raw_stream_re_read_fu_42_p2, ap_CS_fsm_state4, grayscale_valid_load_reg_103)
    begin
        if ((((grayscale_valid_load_reg_103 = ap_const_lv1_1) and (enable_raw_stream_re_read_fu_42_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((enable_raw_stream_re_read_fu_42_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            outStream_LUMA_V_V_TDATA_blk_n <= outStream_LUMA_V_V_1_state(1);
        else 
            outStream_LUMA_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_LUMA_V_V_TVALID <= outStream_LUMA_V_V_1_state(0);
    outStream_grayscale_V_V_1_ack_in <= outStream_grayscale_V_V_1_state(1);
    outStream_grayscale_V_V_1_ack_out <= outStream_grayscale_V_V_TREADY;

    outStream_grayscale_V_V_1_data_out_assign_proc : process(outStream_grayscale_V_V_1_payload_A, outStream_grayscale_V_V_1_payload_B, outStream_grayscale_V_V_1_sel)
    begin
        if ((outStream_grayscale_V_V_1_sel = ap_const_logic_1)) then 
            outStream_grayscale_V_V_1_data_out <= outStream_grayscale_V_V_1_payload_B;
        else 
            outStream_grayscale_V_V_1_data_out <= outStream_grayscale_V_V_1_payload_A;
        end if; 
    end process;

    outStream_grayscale_V_V_1_load_A <= (outStream_grayscale_V_V_1_state_cmp_full and not(outStream_grayscale_V_V_1_sel_wr));
    outStream_grayscale_V_V_1_load_B <= (outStream_grayscale_V_V_1_state_cmp_full and outStream_grayscale_V_V_1_sel_wr);
    outStream_grayscale_V_V_1_sel <= outStream_grayscale_V_V_1_sel_rd;
    outStream_grayscale_V_V_1_state_cmp_full <= '0' when (outStream_grayscale_V_V_1_state = ap_const_lv2_1) else '1';

    outStream_grayscale_V_V_1_vld_in_assign_proc : process(ap_start, ap_CS_fsm_state1, inStream_V_V_0_vld_out, grayscale_valid, ap_block_state1_io)
    begin
        if ((not(((inStream_V_V_0_vld_out = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state1_io))) and (grayscale_valid = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            outStream_grayscale_V_V_1_vld_in <= ap_const_logic_1;
        else 
            outStream_grayscale_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    outStream_grayscale_V_V_1_vld_out <= outStream_grayscale_V_V_1_state(0);
    outStream_grayscale_V_V_TDATA <= outStream_grayscale_V_V_1_data_out;

    outStream_grayscale_V_V_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, outStream_grayscale_V_V_1_state, grayscale_valid, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((grayscale_valid = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            outStream_grayscale_V_V_TDATA_blk_n <= outStream_grayscale_V_V_1_state(1);
        else 
            outStream_grayscale_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outStream_grayscale_V_V_TVALID <= outStream_grayscale_V_V_1_state(0);
    xor_ln30_fu_81_p2 <= (grayscale_valid_load_reg_103 xor ap_const_lv1_1);
end behav;
